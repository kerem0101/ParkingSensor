
ParkingSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000222c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080022ec  080022ec  000122ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002324  08002324  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002324  08002324  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002324  08002324  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002324  08002324  00012324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002328  08002328  00012328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800232c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08002338  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002338  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095c7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016af  00000000  00000000  000295fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  0002acb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002b790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fea5  00000000  00000000  0002c1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b747  00000000  00000000  0003c08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064659  00000000  00000000  000477d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000abe2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002754  00000000  00000000  000abe80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080022d4 	.word	0x080022d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080022d4 	.word	0x080022d4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fb02 	bl	800082c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f868 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f938 	bl	80004a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000230:	f000 f906 	bl	8000440 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000234:	f000 f8ae 	bl	8000394 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_TIM_Base_Start(&htim3);
 8000238:	4b2c      	ldr	r3, [pc, #176]	; (80002ec <main+0xcc>)
 800023a:	0018      	movs	r0, r3
 800023c:	f001 fa82 	bl	8001744 <HAL_TIM_Base_Start>

	  time = Read_HCSR04();
 8000240:	f000 f9ee 	bl	8000620 <Read_HCSR04>
 8000244:	0002      	movs	r2, r0
 8000246:	4b2a      	ldr	r3, [pc, #168]	; (80002f0 <main+0xd0>)
 8000248:	601a      	str	r2, [r3, #0]
	  distance = time / 29;
 800024a:	4b29      	ldr	r3, [pc, #164]	; (80002f0 <main+0xd0>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	211d      	movs	r1, #29
 8000250:	0018      	movs	r0, r3
 8000252:	f7ff ff59 	bl	8000108 <__udivsi3>
 8000256:	0003      	movs	r3, r0
 8000258:	001a      	movs	r2, r3
 800025a:	4b26      	ldr	r3, [pc, #152]	; (80002f4 <main+0xd4>)
 800025c:	601a      	str	r2, [r3, #0]

	  if(distance < 10){
 800025e:	4b25      	ldr	r3, [pc, #148]	; (80002f4 <main+0xd4>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	2b09      	cmp	r3, #9
 8000264:	d80d      	bhi.n	8000282 <main+0x62>
		  GPIOB->ODR = 0x300;
 8000266:	4b24      	ldr	r3, [pc, #144]	; (80002f8 <main+0xd8>)
 8000268:	22c0      	movs	r2, #192	; 0xc0
 800026a:	0092      	lsls	r2, r2, #2
 800026c:	615a      	str	r2, [r3, #20]
		  HAL_Delay(100);
 800026e:	2064      	movs	r0, #100	; 0x64
 8000270:	f000 fb40 	bl	80008f4 <HAL_Delay>
		  GPIOB->ODR = 0;
 8000274:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <main+0xd8>)
 8000276:	2200      	movs	r2, #0
 8000278:	615a      	str	r2, [r3, #20]
		  HAL_Delay(100);
 800027a:	2064      	movs	r0, #100	; 0x64
 800027c:	f000 fb3a 	bl	80008f4 <HAL_Delay>
 8000280:	e7da      	b.n	8000238 <main+0x18>
	  }
	  else if(distance >= 10 && distance < 20){
 8000282:	4b1c      	ldr	r3, [pc, #112]	; (80002f4 <main+0xd4>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b09      	cmp	r3, #9
 8000288:	d911      	bls.n	80002ae <main+0x8e>
 800028a:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <main+0xd4>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	2b13      	cmp	r3, #19
 8000290:	d80d      	bhi.n	80002ae <main+0x8e>
		  GPIOB->ODR = 0x300;
 8000292:	4b19      	ldr	r3, [pc, #100]	; (80002f8 <main+0xd8>)
 8000294:	22c0      	movs	r2, #192	; 0xc0
 8000296:	0092      	lsls	r2, r2, #2
 8000298:	615a      	str	r2, [r3, #20]
		  HAL_Delay(250);
 800029a:	20fa      	movs	r0, #250	; 0xfa
 800029c:	f000 fb2a 	bl	80008f4 <HAL_Delay>
		  GPIOB->ODR = 0;
 80002a0:	4b15      	ldr	r3, [pc, #84]	; (80002f8 <main+0xd8>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	615a      	str	r2, [r3, #20]
		  HAL_Delay(250);
 80002a6:	20fa      	movs	r0, #250	; 0xfa
 80002a8:	f000 fb24 	bl	80008f4 <HAL_Delay>
 80002ac:	e01c      	b.n	80002e8 <main+0xc8>
	  }
	  else if(distance >= 20 && distance < 30){
 80002ae:	4b11      	ldr	r3, [pc, #68]	; (80002f4 <main+0xd4>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b13      	cmp	r3, #19
 80002b4:	d915      	bls.n	80002e2 <main+0xc2>
 80002b6:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <main+0xd4>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	2b1d      	cmp	r3, #29
 80002bc:	d811      	bhi.n	80002e2 <main+0xc2>
		  GPIOB->ODR = 0x300;
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <main+0xd8>)
 80002c0:	22c0      	movs	r2, #192	; 0xc0
 80002c2:	0092      	lsls	r2, r2, #2
 80002c4:	615a      	str	r2, [r3, #20]
		  HAL_Delay(450);
 80002c6:	23e1      	movs	r3, #225	; 0xe1
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	0018      	movs	r0, r3
 80002cc:	f000 fb12 	bl	80008f4 <HAL_Delay>
		  GPIOB->ODR = 0;
 80002d0:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <main+0xd8>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	615a      	str	r2, [r3, #20]
		  HAL_Delay(450);
 80002d6:	23e1      	movs	r3, #225	; 0xe1
 80002d8:	005b      	lsls	r3, r3, #1
 80002da:	0018      	movs	r0, r3
 80002dc:	f000 fb0a 	bl	80008f4 <HAL_Delay>
 80002e0:	e002      	b.n	80002e8 <main+0xc8>
	  }
	  else{
		  GPIOB->ODR = 0;
 80002e2:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <main+0xd8>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	615a      	str	r2, [r3, #20]
	  HAL_TIM_Base_Start(&htim3);
 80002e8:	e7a6      	b.n	8000238 <main+0x18>
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	20000030 	.word	0x20000030
 80002f0:	20000028 	.word	0x20000028
 80002f4:	2000002c 	.word	0x2000002c
 80002f8:	48000400 	.word	0x48000400

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b091      	sub	sp, #68	; 0x44
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	2410      	movs	r4, #16
 8000304:	193b      	adds	r3, r7, r4
 8000306:	0018      	movs	r0, r3
 8000308:	2330      	movs	r3, #48	; 0x30
 800030a:	001a      	movs	r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	f001 ffd9 	bl	80022c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000312:	003b      	movs	r3, r7
 8000314:	0018      	movs	r0, r3
 8000316:	2310      	movs	r3, #16
 8000318:	001a      	movs	r2, r3
 800031a:	2100      	movs	r1, #0
 800031c:	f001 ffd2 	bl	80022c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000320:	0021      	movs	r1, r4
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2202      	movs	r2, #2
 8000326:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2201      	movs	r2, #1
 800032c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2210      	movs	r2, #16
 8000332:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2202      	movs	r2, #2
 8000338:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2280      	movs	r2, #128	; 0x80
 800033e:	0212      	lsls	r2, r2, #8
 8000340:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000342:	187b      	adds	r3, r7, r1
 8000344:	2280      	movs	r2, #128	; 0x80
 8000346:	0352      	lsls	r2, r2, #13
 8000348:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800034a:	187b      	adds	r3, r7, r1
 800034c:	2200      	movs	r2, #0
 800034e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000350:	187b      	adds	r3, r7, r1
 8000352:	0018      	movs	r0, r3
 8000354:	f000 fd34 	bl	8000dc0 <HAL_RCC_OscConfig>
 8000358:	1e03      	subs	r3, r0, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800035c:	f000 f98c 	bl	8000678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000360:	003b      	movs	r3, r7
 8000362:	2207      	movs	r2, #7
 8000364:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000366:	003b      	movs	r3, r7
 8000368:	2202      	movs	r2, #2
 800036a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036c:	003b      	movs	r3, r7
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000372:	003b      	movs	r3, r7
 8000374:	2200      	movs	r2, #0
 8000376:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000378:	003b      	movs	r3, r7
 800037a:	2101      	movs	r1, #1
 800037c:	0018      	movs	r0, r3
 800037e:	f001 f83d 	bl	80013fc <HAL_RCC_ClockConfig>
 8000382:	1e03      	subs	r3, r0, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000386:	f000 f977 	bl	8000678 <Error_Handler>
  }
}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	b011      	add	sp, #68	; 0x44
 8000390:	bd90      	pop	{r4, r7, pc}
	...

08000394 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039a:	2308      	movs	r3, #8
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	0018      	movs	r0, r3
 80003a0:	2310      	movs	r3, #16
 80003a2:	001a      	movs	r2, r3
 80003a4:	2100      	movs	r1, #0
 80003a6:	f001 ff8d 	bl	80022c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003aa:	003b      	movs	r3, r7
 80003ac:	0018      	movs	r0, r3
 80003ae:	2308      	movs	r3, #8
 80003b0:	001a      	movs	r2, r3
 80003b2:	2100      	movs	r1, #0
 80003b4:	f001 ff86 	bl	80022c4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80003b8:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <MX_TIM3_Init+0xa0>)
 80003ba:	4a1f      	ldr	r2, [pc, #124]	; (8000438 <MX_TIM3_Init+0xa4>)
 80003bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 80003be:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <MX_TIM3_Init+0xa0>)
 80003c0:	222f      	movs	r2, #47	; 0x2f
 80003c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_TIM3_Init+0xa0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_TIM3_Init+0xa0>)
 80003cc:	4a1b      	ldr	r2, [pc, #108]	; (800043c <MX_TIM3_Init+0xa8>)
 80003ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_TIM3_Init+0xa0>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d6:	4b17      	ldr	r3, [pc, #92]	; (8000434 <MX_TIM3_Init+0xa0>)
 80003d8:	2200      	movs	r2, #0
 80003da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003dc:	4b15      	ldr	r3, [pc, #84]	; (8000434 <MX_TIM3_Init+0xa0>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f001 f960 	bl	80016a4 <HAL_TIM_Base_Init>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80003e8:	f000 f946 	bl	8000678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ec:	2108      	movs	r1, #8
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	2280      	movs	r2, #128	; 0x80
 80003f2:	0152      	lsls	r2, r2, #5
 80003f4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003f6:	187a      	adds	r2, r7, r1
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_TIM3_Init+0xa0>)
 80003fa:	0011      	movs	r1, r2
 80003fc:	0018      	movs	r0, r3
 80003fe:	f001 f9e5 	bl	80017cc <HAL_TIM_ConfigClockSource>
 8000402:	1e03      	subs	r3, r0, #0
 8000404:	d001      	beq.n	800040a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000406:	f000 f937 	bl	8000678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040a:	003b      	movs	r3, r7
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000410:	003b      	movs	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000416:	003a      	movs	r2, r7
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_TIM3_Init+0xa0>)
 800041a:	0011      	movs	r1, r2
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fbaf 	bl	8001b80 <HAL_TIMEx_MasterConfigSynchronization>
 8000422:	1e03      	subs	r3, r0, #0
 8000424:	d001      	beq.n	800042a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000426:	f000 f927 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b006      	add	sp, #24
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	20000030 	.word	0x20000030
 8000438:	40000400 	.word	0x40000400
 800043c:	0000ffff 	.word	0x0000ffff

08000440 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <MX_USART2_UART_Init+0x58>)
 8000446:	4a15      	ldr	r2, [pc, #84]	; (800049c <MX_USART2_UART_Init+0x5c>)
 8000448:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <MX_USART2_UART_Init+0x58>)
 800044c:	2296      	movs	r2, #150	; 0x96
 800044e:	0212      	lsls	r2, r2, #8
 8000450:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <MX_USART2_UART_Init+0x58>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_USART2_UART_Init+0x58>)
 800045a:	2200      	movs	r2, #0
 800045c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800045e:	4b0e      	ldr	r3, [pc, #56]	; (8000498 <MX_USART2_UART_Init+0x58>)
 8000460:	2200      	movs	r2, #0
 8000462:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000464:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <MX_USART2_UART_Init+0x58>)
 8000466:	220c      	movs	r2, #12
 8000468:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <MX_USART2_UART_Init+0x58>)
 800046c:	2200      	movs	r2, #0
 800046e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000470:	4b09      	ldr	r3, [pc, #36]	; (8000498 <MX_USART2_UART_Init+0x58>)
 8000472:	2200      	movs	r2, #0
 8000474:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <MX_USART2_UART_Init+0x58>)
 8000478:	2200      	movs	r2, #0
 800047a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800047c:	4b06      	ldr	r3, [pc, #24]	; (8000498 <MX_USART2_UART_Init+0x58>)
 800047e:	2200      	movs	r2, #0
 8000480:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <MX_USART2_UART_Init+0x58>)
 8000484:	0018      	movs	r0, r3
 8000486:	f001 fbd3 	bl	8001c30 <HAL_UART_Init>
 800048a:	1e03      	subs	r3, r0, #0
 800048c:	d001      	beq.n	8000492 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800048e:	f000 f8f3 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000078 	.word	0x20000078
 800049c:	40004400 	.word	0x40004400

080004a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b08b      	sub	sp, #44	; 0x2c
 80004a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a6:	2414      	movs	r4, #20
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	0018      	movs	r0, r3
 80004ac:	2314      	movs	r3, #20
 80004ae:	001a      	movs	r2, r3
 80004b0:	2100      	movs	r1, #0
 80004b2:	f001 ff07 	bl	80022c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004b6:	4b4b      	ldr	r3, [pc, #300]	; (80005e4 <MX_GPIO_Init+0x144>)
 80004b8:	695a      	ldr	r2, [r3, #20]
 80004ba:	4b4a      	ldr	r3, [pc, #296]	; (80005e4 <MX_GPIO_Init+0x144>)
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	0309      	lsls	r1, r1, #12
 80004c0:	430a      	orrs	r2, r1
 80004c2:	615a      	str	r2, [r3, #20]
 80004c4:	4b47      	ldr	r3, [pc, #284]	; (80005e4 <MX_GPIO_Init+0x144>)
 80004c6:	695a      	ldr	r2, [r3, #20]
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	031b      	lsls	r3, r3, #12
 80004cc:	4013      	ands	r3, r2
 80004ce:	613b      	str	r3, [r7, #16]
 80004d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d2:	4b44      	ldr	r3, [pc, #272]	; (80005e4 <MX_GPIO_Init+0x144>)
 80004d4:	695a      	ldr	r2, [r3, #20]
 80004d6:	4b43      	ldr	r3, [pc, #268]	; (80005e4 <MX_GPIO_Init+0x144>)
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	03c9      	lsls	r1, r1, #15
 80004dc:	430a      	orrs	r2, r1
 80004de:	615a      	str	r2, [r3, #20]
 80004e0:	4b40      	ldr	r3, [pc, #256]	; (80005e4 <MX_GPIO_Init+0x144>)
 80004e2:	695a      	ldr	r2, [r3, #20]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	03db      	lsls	r3, r3, #15
 80004e8:	4013      	ands	r3, r2
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	4b3d      	ldr	r3, [pc, #244]	; (80005e4 <MX_GPIO_Init+0x144>)
 80004f0:	695a      	ldr	r2, [r3, #20]
 80004f2:	4b3c      	ldr	r3, [pc, #240]	; (80005e4 <MX_GPIO_Init+0x144>)
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	0289      	lsls	r1, r1, #10
 80004f8:	430a      	orrs	r2, r1
 80004fa:	615a      	str	r2, [r3, #20]
 80004fc:	4b39      	ldr	r3, [pc, #228]	; (80005e4 <MX_GPIO_Init+0x144>)
 80004fe:	695a      	ldr	r2, [r3, #20]
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	029b      	lsls	r3, r3, #10
 8000504:	4013      	ands	r3, r2
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	4b36      	ldr	r3, [pc, #216]	; (80005e4 <MX_GPIO_Init+0x144>)
 800050c:	695a      	ldr	r2, [r3, #20]
 800050e:	4b35      	ldr	r3, [pc, #212]	; (80005e4 <MX_GPIO_Init+0x144>)
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	02c9      	lsls	r1, r1, #11
 8000514:	430a      	orrs	r2, r1
 8000516:	615a      	str	r2, [r3, #20]
 8000518:	4b32      	ldr	r3, [pc, #200]	; (80005e4 <MX_GPIO_Init+0x144>)
 800051a:	695a      	ldr	r2, [r3, #20]
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	02db      	lsls	r3, r3, #11
 8000520:	4013      	ands	r3, r2
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000526:	2390      	movs	r3, #144	; 0x90
 8000528:	0059      	lsls	r1, r3, #1
 800052a:	2390      	movs	r3, #144	; 0x90
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	2200      	movs	r2, #0
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fc27 	bl	8000d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000536:	23c0      	movs	r3, #192	; 0xc0
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	482b      	ldr	r0, [pc, #172]	; (80005e8 <MX_GPIO_Init+0x148>)
 800053c:	2200      	movs	r2, #0
 800053e:	0019      	movs	r1, r3
 8000540:	f000 fc20 	bl	8000d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	0192      	lsls	r2, r2, #6
 800054a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800054c:	193b      	adds	r3, r7, r4
 800054e:	4a27      	ldr	r2, [pc, #156]	; (80005ec <MX_GPIO_Init+0x14c>)
 8000550:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	193b      	adds	r3, r7, r4
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000558:	193b      	adds	r3, r7, r4
 800055a:	4a25      	ldr	r2, [pc, #148]	; (80005f0 <MX_GPIO_Init+0x150>)
 800055c:	0019      	movs	r1, r3
 800055e:	0010      	movs	r0, r2
 8000560:	f000 faa0 	bl	8000aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8000564:	0021      	movs	r1, r4
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2290      	movs	r2, #144	; 0x90
 800056a:	0052      	lsls	r2, r2, #1
 800056c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800056e:	000c      	movs	r4, r1
 8000570:	193b      	adds	r3, r7, r4
 8000572:	2201      	movs	r2, #1
 8000574:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	193b      	adds	r3, r7, r4
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057c:	193b      	adds	r3, r7, r4
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000582:	193a      	adds	r2, r7, r4
 8000584:	2390      	movs	r3, #144	; 0x90
 8000586:	05db      	lsls	r3, r3, #23
 8000588:	0011      	movs	r1, r2
 800058a:	0018      	movs	r0, r3
 800058c:	f000 fa8a 	bl	8000aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000590:	193b      	adds	r3, r7, r4
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	0092      	lsls	r2, r2, #2
 8000596:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	193b      	adds	r3, r7, r4
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	193a      	adds	r2, r7, r4
 80005a6:	2390      	movs	r3, #144	; 0x90
 80005a8:	05db      	lsls	r3, r3, #23
 80005aa:	0011      	movs	r1, r2
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 fa79 	bl	8000aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005b2:	0021      	movs	r1, r4
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	22c0      	movs	r2, #192	; 0xc0
 80005b8:	0092      	lsls	r2, r2, #2
 80005ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2201      	movs	r2, #1
 80005c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	4a05      	ldr	r2, [pc, #20]	; (80005e8 <MX_GPIO_Init+0x148>)
 80005d2:	0019      	movs	r1, r3
 80005d4:	0010      	movs	r0, r2
 80005d6:	f000 fa65 	bl	8000aa4 <HAL_GPIO_Init>

}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b00b      	add	sp, #44	; 0x2c
 80005e0:	bd90      	pop	{r4, r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	40021000 	.word	0x40021000
 80005e8:	48000400 	.word	0x48000400
 80005ec:	10210000 	.word	0x10210000
 80005f0:	48000800 	.word	0x48000800

080005f4 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t us){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3,0);
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <delay_us+0x28>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2200      	movs	r2, #0
 8000602:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < us);
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <delay_us+0x28>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	429a      	cmp	r2, r3
 8000610:	d8f9      	bhi.n	8000606 <delay_us+0x12>
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	b002      	add	sp, #8
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000030 	.word	0x20000030

08000620 <Read_HCSR04>:

uint32_t Read_HCSR04(){
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	uint32_t temp = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]

	GPIOA->ODR = 0x100;
 800062a:	2390      	movs	r3, #144	; 0x90
 800062c:	05db      	lsls	r3, r3, #23
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	0052      	lsls	r2, r2, #1
 8000632:	615a      	str	r2, [r3, #20]
	delay_us(10);
 8000634:	200a      	movs	r0, #10
 8000636:	f7ff ffdd 	bl	80005f4 <delay_us>
	GPIOA->ODR = 0;
 800063a:	2390      	movs	r3, #144	; 0x90
 800063c:	05db      	lsls	r3, r3, #23
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]

	while(!(GPIOA->IDR & 0x200));
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	2390      	movs	r3, #144	; 0x90
 8000646:	05db      	lsls	r3, r3, #23
 8000648:	691a      	ldr	r2, [r3, #16]
 800064a:	2380      	movs	r3, #128	; 0x80
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	4013      	ands	r3, r2
 8000650:	d0f8      	beq.n	8000644 <Read_HCSR04+0x24>

	while(GPIOA->IDR & 0x200){
 8000652:	e005      	b.n	8000660 <Read_HCSR04+0x40>
		temp++;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3301      	adds	r3, #1
 8000658:	607b      	str	r3, [r7, #4]
		delay_us(1);
 800065a:	2001      	movs	r0, #1
 800065c:	f7ff ffca 	bl	80005f4 <delay_us>
	while(GPIOA->IDR & 0x200){
 8000660:	2390      	movs	r3, #144	; 0x90
 8000662:	05db      	lsls	r3, r3, #23
 8000664:	691a      	ldr	r2, [r3, #16]
 8000666:	2380      	movs	r3, #128	; 0x80
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	4013      	ands	r3, r2
 800066c:	d1f2      	bne.n	8000654 <Read_HCSR04+0x34>
	}
	return temp;
 800066e:	687b      	ldr	r3, [r7, #4]
}
 8000670:	0018      	movs	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	b002      	add	sp, #8
 8000676:	bd80      	pop	{r7, pc}

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	e7fe      	b.n	8000680 <Error_Handler+0x8>
	...

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_MspInit+0x44>)
 800068c:	699a      	ldr	r2, [r3, #24]
 800068e:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <HAL_MspInit+0x44>)
 8000690:	2101      	movs	r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	619a      	str	r2, [r3, #24]
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_MspInit+0x44>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_MspInit+0x44>)
 80006a4:	69da      	ldr	r2, [r3, #28]
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <HAL_MspInit+0x44>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0549      	lsls	r1, r1, #21
 80006ac:	430a      	orrs	r2, r1
 80006ae:	61da      	str	r2, [r3, #28]
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <HAL_MspInit+0x44>)
 80006b2:	69da      	ldr	r2, [r3, #28]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	055b      	lsls	r3, r3, #21
 80006b8:	4013      	ands	r3, r2
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	b002      	add	sp, #8
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a09      	ldr	r2, [pc, #36]	; (8000700 <HAL_TIM_Base_MspInit+0x34>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d10b      	bne.n	80006f6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80006de:	4b09      	ldr	r3, [pc, #36]	; (8000704 <HAL_TIM_Base_MspInit+0x38>)
 80006e0:	69da      	ldr	r2, [r3, #28]
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <HAL_TIM_Base_MspInit+0x38>)
 80006e4:	2102      	movs	r1, #2
 80006e6:	430a      	orrs	r2, r1
 80006e8:	61da      	str	r2, [r3, #28]
 80006ea:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_TIM_Base_MspInit+0x38>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	2202      	movs	r2, #2
 80006f0:	4013      	ands	r3, r2
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b004      	add	sp, #16
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	40000400 	.word	0x40000400
 8000704:	40021000 	.word	0x40021000

08000708 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b08b      	sub	sp, #44	; 0x2c
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	2414      	movs	r4, #20
 8000712:	193b      	adds	r3, r7, r4
 8000714:	0018      	movs	r0, r3
 8000716:	2314      	movs	r3, #20
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f001 fdd2 	bl	80022c4 <memset>
  if(huart->Instance==USART2)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <HAL_UART_MspInit+0x90>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d132      	bne.n	8000790 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <HAL_UART_MspInit+0x94>)
 800072c:	69da      	ldr	r2, [r3, #28]
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <HAL_UART_MspInit+0x94>)
 8000730:	2180      	movs	r1, #128	; 0x80
 8000732:	0289      	lsls	r1, r1, #10
 8000734:	430a      	orrs	r2, r1
 8000736:	61da      	str	r2, [r3, #28]
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <HAL_UART_MspInit+0x94>)
 800073a:	69da      	ldr	r2, [r3, #28]
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	029b      	lsls	r3, r3, #10
 8000740:	4013      	ands	r3, r2
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_UART_MspInit+0x94>)
 8000748:	695a      	ldr	r2, [r3, #20]
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <HAL_UART_MspInit+0x94>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	0289      	lsls	r1, r1, #10
 8000750:	430a      	orrs	r2, r1
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <HAL_UART_MspInit+0x94>)
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	029b      	lsls	r3, r3, #10
 800075c:	4013      	ands	r3, r2
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000762:	0021      	movs	r1, r4
 8000764:	187b      	adds	r3, r7, r1
 8000766:	220c      	movs	r2, #12
 8000768:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2202      	movs	r2, #2
 800076e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2203      	movs	r2, #3
 800077a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2201      	movs	r2, #1
 8000780:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	187a      	adds	r2, r7, r1
 8000784:	2390      	movs	r3, #144	; 0x90
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f98a 	bl	8000aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b00b      	add	sp, #44	; 0x2c
 8000796:	bd90      	pop	{r4, r7, pc}
 8000798:	40004400 	.word	0x40004400
 800079c:	40021000 	.word	0x40021000

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 f87a 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d8:	480d      	ldr	r0, [pc, #52]	; (8000810 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480d      	ldr	r0, [pc, #52]	; (8000814 <LoopForever+0x6>)
  ldr r1, =_edata
 80007de:	490e      	ldr	r1, [pc, #56]	; (8000818 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e0:	4a0e      	ldr	r2, [pc, #56]	; (800081c <LoopForever+0xe>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0b      	ldr	r2, [pc, #44]	; (8000820 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f4:	4c0b      	ldr	r4, [pc, #44]	; (8000824 <LoopForever+0x16>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000802:	f7ff ffe4 	bl	80007ce <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000806:	f001 fd39 	bl	800227c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080a:	f7ff fd09 	bl	8000220 <main>

0800080e <LoopForever>:

LoopForever:
    b LoopForever
 800080e:	e7fe      	b.n	800080e <LoopForever>
  ldr   r0, =_estack
 8000810:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000818:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800081c:	0800232c 	.word	0x0800232c
  ldr r2, =_sbss
 8000820:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000824:	20000100 	.word	0x20000100

08000828 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC1_IRQHandler>
	...

0800082c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <HAL_Init+0x24>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_Init+0x24>)
 8000836:	2110      	movs	r1, #16
 8000838:	430a      	orrs	r2, r1
 800083a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800083c:	2000      	movs	r0, #0
 800083e:	f000 f809 	bl	8000854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000842:	f7ff ff1f 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000846:	2300      	movs	r3, #0
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	40022000 	.word	0x40022000

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <HAL_InitTick+0x5c>)
 800085e:	681c      	ldr	r4, [r3, #0]
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_InitTick+0x60>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	0019      	movs	r1, r3
 8000866:	23fa      	movs	r3, #250	; 0xfa
 8000868:	0098      	lsls	r0, r3, #2
 800086a:	f7ff fc4d 	bl	8000108 <__udivsi3>
 800086e:	0003      	movs	r3, r0
 8000870:	0019      	movs	r1, r3
 8000872:	0020      	movs	r0, r4
 8000874:	f7ff fc48 	bl	8000108 <__udivsi3>
 8000878:	0003      	movs	r3, r0
 800087a:	0018      	movs	r0, r3
 800087c:	f000 f905 	bl	8000a8a <HAL_SYSTICK_Config>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000884:	2301      	movs	r3, #1
 8000886:	e00f      	b.n	80008a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2b03      	cmp	r3, #3
 800088c:	d80b      	bhi.n	80008a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	2301      	movs	r3, #1
 8000892:	425b      	negs	r3, r3
 8000894:	2200      	movs	r2, #0
 8000896:	0018      	movs	r0, r3
 8000898:	f000 f8e2 	bl	8000a60 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_InitTick+0x64>)
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b003      	add	sp, #12
 80008ae:	bd90      	pop	{r4, r7, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000004 	.word	0x20000004

080008bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_IncTick+0x1c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	001a      	movs	r2, r3
 80008c6:	4b05      	ldr	r3, [pc, #20]	; (80008dc <HAL_IncTick+0x20>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	18d2      	adds	r2, r2, r3
 80008cc:	4b03      	ldr	r3, [pc, #12]	; (80008dc <HAL_IncTick+0x20>)
 80008ce:	601a      	str	r2, [r3, #0]
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	20000008 	.word	0x20000008
 80008dc:	200000fc 	.word	0x200000fc

080008e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  return uwTick;
 80008e4:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <HAL_GetTick+0x10>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	200000fc 	.word	0x200000fc

080008f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008fc:	f7ff fff0 	bl	80008e0 <HAL_GetTick>
 8000900:	0003      	movs	r3, r0
 8000902:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	d005      	beq.n	800091a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800090e:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <HAL_Delay+0x44>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	001a      	movs	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	189b      	adds	r3, r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	f7ff ffe0 	bl	80008e0 <HAL_GetTick>
 8000920:	0002      	movs	r2, r0
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8f7      	bhi.n	800091c <HAL_Delay+0x28>
  {
  }
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b004      	add	sp, #16
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	20000008 	.word	0x20000008

0800093c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	0002      	movs	r2, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b7f      	cmp	r3, #127	; 0x7f
 8000950:	d828      	bhi.n	80009a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000952:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <__NVIC_SetPriority+0xd4>)
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b25b      	sxtb	r3, r3
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	33c0      	adds	r3, #192	; 0xc0
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	589b      	ldr	r3, [r3, r2]
 8000962:	1dfa      	adds	r2, r7, #7
 8000964:	7812      	ldrb	r2, [r2, #0]
 8000966:	0011      	movs	r1, r2
 8000968:	2203      	movs	r2, #3
 800096a:	400a      	ands	r2, r1
 800096c:	00d2      	lsls	r2, r2, #3
 800096e:	21ff      	movs	r1, #255	; 0xff
 8000970:	4091      	lsls	r1, r2
 8000972:	000a      	movs	r2, r1
 8000974:	43d2      	mvns	r2, r2
 8000976:	401a      	ands	r2, r3
 8000978:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	019b      	lsls	r3, r3, #6
 800097e:	22ff      	movs	r2, #255	; 0xff
 8000980:	401a      	ands	r2, r3
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	0018      	movs	r0, r3
 8000988:	2303      	movs	r3, #3
 800098a:	4003      	ands	r3, r0
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000990:	481f      	ldr	r0, [pc, #124]	; (8000a10 <__NVIC_SetPriority+0xd4>)
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b25b      	sxtb	r3, r3
 8000998:	089b      	lsrs	r3, r3, #2
 800099a:	430a      	orrs	r2, r1
 800099c:	33c0      	adds	r3, #192	; 0xc0
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009a2:	e031      	b.n	8000a08 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a4:	4a1b      	ldr	r2, [pc, #108]	; (8000a14 <__NVIC_SetPriority+0xd8>)
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	0019      	movs	r1, r3
 80009ac:	230f      	movs	r3, #15
 80009ae:	400b      	ands	r3, r1
 80009b0:	3b08      	subs	r3, #8
 80009b2:	089b      	lsrs	r3, r3, #2
 80009b4:	3306      	adds	r3, #6
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	18d3      	adds	r3, r2, r3
 80009ba:	3304      	adds	r3, #4
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	1dfa      	adds	r2, r7, #7
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	0011      	movs	r1, r2
 80009c4:	2203      	movs	r2, #3
 80009c6:	400a      	ands	r2, r1
 80009c8:	00d2      	lsls	r2, r2, #3
 80009ca:	21ff      	movs	r1, #255	; 0xff
 80009cc:	4091      	lsls	r1, r2
 80009ce:	000a      	movs	r2, r1
 80009d0:	43d2      	mvns	r2, r2
 80009d2:	401a      	ands	r2, r3
 80009d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	019b      	lsls	r3, r3, #6
 80009da:	22ff      	movs	r2, #255	; 0xff
 80009dc:	401a      	ands	r2, r3
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	0018      	movs	r0, r3
 80009e4:	2303      	movs	r3, #3
 80009e6:	4003      	ands	r3, r0
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <__NVIC_SetPriority+0xd8>)
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	001c      	movs	r4, r3
 80009f4:	230f      	movs	r3, #15
 80009f6:	4023      	ands	r3, r4
 80009f8:	3b08      	subs	r3, #8
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	430a      	orrs	r2, r1
 80009fe:	3306      	adds	r3, #6
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	18c3      	adds	r3, r0, r3
 8000a04:	3304      	adds	r3, #4
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b003      	add	sp, #12
 8000a0e:	bd90      	pop	{r4, r7, pc}
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	1e5a      	subs	r2, r3, #1
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	045b      	lsls	r3, r3, #17
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d301      	bcc.n	8000a30 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	e010      	b.n	8000a52 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <SysTick_Config+0x44>)
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	3a01      	subs	r2, #1
 8000a36:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a38:	2301      	movs	r3, #1
 8000a3a:	425b      	negs	r3, r3
 8000a3c:	2103      	movs	r1, #3
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f7ff ff7c 	bl	800093c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <SysTick_Config+0x44>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SysTick_Config+0x44>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	0018      	movs	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b002      	add	sp, #8
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
 8000a6a:	210f      	movs	r1, #15
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	1c02      	adds	r2, r0, #0
 8000a70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b25b      	sxtb	r3, r3
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff ff5d 	bl	800093c <__NVIC_SetPriority>
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b004      	add	sp, #16
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff ffbf 	bl	8000a18 <SysTick_Config>
 8000a9a:	0003      	movs	r3, r0
}
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab2:	e14f      	b.n	8000d54 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2101      	movs	r1, #1
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	4091      	lsls	r1, r2
 8000abe:	000a      	movs	r2, r1
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d100      	bne.n	8000acc <HAL_GPIO_Init+0x28>
 8000aca:	e140      	b.n	8000d4e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d00b      	beq.n	8000aec <HAL_GPIO_Init+0x48>
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d007      	beq.n	8000aec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae0:	2b11      	cmp	r3, #17
 8000ae2:	d003      	beq.n	8000aec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b12      	cmp	r3, #18
 8000aea:	d130      	bne.n	8000b4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	2203      	movs	r2, #3
 8000af8:	409a      	lsls	r2, r3
 8000afa:	0013      	movs	r3, r2
 8000afc:	43da      	mvns	r2, r3
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68da      	ldr	r2, [r3, #12]
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	0013      	movs	r3, r2
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b22:	2201      	movs	r2, #1
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	091b      	lsrs	r3, r3, #4
 8000b38:	2201      	movs	r2, #1
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	2203      	movs	r2, #3
 8000b5a:	409a      	lsls	r2, r3
 8000b5c:	0013      	movs	r3, r2
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	0013      	movs	r3, r2
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d003      	beq.n	8000b8e <HAL_GPIO_Init+0xea>
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d123      	bne.n	8000bd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	08da      	lsrs	r2, r3, #3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3208      	adds	r2, #8
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	58d3      	ldr	r3, [r2, r3]
 8000b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	220f      	movs	r2, #15
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	0013      	movs	r3, r2
 8000baa:	43da      	mvns	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	691a      	ldr	r2, [r3, #16]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2107      	movs	r1, #7
 8000bba:	400b      	ands	r3, r1
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	08da      	lsrs	r2, r3, #3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3208      	adds	r2, #8
 8000bd0:	0092      	lsls	r2, r2, #2
 8000bd2:	6939      	ldr	r1, [r7, #16]
 8000bd4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	2203      	movs	r2, #3
 8000be2:	409a      	lsls	r2, r3
 8000be4:	0013      	movs	r3, r2
 8000be6:	43da      	mvns	r2, r3
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	409a      	lsls	r2, r3
 8000bfc:	0013      	movs	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	055b      	lsls	r3, r3, #21
 8000c12:	4013      	ands	r3, r2
 8000c14:	d100      	bne.n	8000c18 <HAL_GPIO_Init+0x174>
 8000c16:	e09a      	b.n	8000d4e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c18:	4b54      	ldr	r3, [pc, #336]	; (8000d6c <HAL_GPIO_Init+0x2c8>)
 8000c1a:	699a      	ldr	r2, [r3, #24]
 8000c1c:	4b53      	ldr	r3, [pc, #332]	; (8000d6c <HAL_GPIO_Init+0x2c8>)
 8000c1e:	2101      	movs	r1, #1
 8000c20:	430a      	orrs	r2, r1
 8000c22:	619a      	str	r2, [r3, #24]
 8000c24:	4b51      	ldr	r3, [pc, #324]	; (8000d6c <HAL_GPIO_Init+0x2c8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c30:	4a4f      	ldr	r2, [pc, #316]	; (8000d70 <HAL_GPIO_Init+0x2cc>)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	089b      	lsrs	r3, r3, #2
 8000c36:	3302      	adds	r3, #2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	589b      	ldr	r3, [r3, r2]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2203      	movs	r2, #3
 8000c42:	4013      	ands	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	220f      	movs	r2, #15
 8000c48:	409a      	lsls	r2, r3
 8000c4a:	0013      	movs	r3, r2
 8000c4c:	43da      	mvns	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	2390      	movs	r3, #144	; 0x90
 8000c58:	05db      	lsls	r3, r3, #23
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	d013      	beq.n	8000c86 <HAL_GPIO_Init+0x1e2>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4a44      	ldr	r2, [pc, #272]	; (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d00d      	beq.n	8000c82 <HAL_GPIO_Init+0x1de>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4a43      	ldr	r2, [pc, #268]	; (8000d78 <HAL_GPIO_Init+0x2d4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d007      	beq.n	8000c7e <HAL_GPIO_Init+0x1da>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4a42      	ldr	r2, [pc, #264]	; (8000d7c <HAL_GPIO_Init+0x2d8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d101      	bne.n	8000c7a <HAL_GPIO_Init+0x1d6>
 8000c76:	2303      	movs	r3, #3
 8000c78:	e006      	b.n	8000c88 <HAL_GPIO_Init+0x1e4>
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	e004      	b.n	8000c88 <HAL_GPIO_Init+0x1e4>
 8000c7e:	2302      	movs	r3, #2
 8000c80:	e002      	b.n	8000c88 <HAL_GPIO_Init+0x1e4>
 8000c82:	2301      	movs	r3, #1
 8000c84:	e000      	b.n	8000c88 <HAL_GPIO_Init+0x1e4>
 8000c86:	2300      	movs	r3, #0
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	400a      	ands	r2, r1
 8000c8e:	0092      	lsls	r2, r2, #2
 8000c90:	4093      	lsls	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c98:	4935      	ldr	r1, [pc, #212]	; (8000d70 <HAL_GPIO_Init+0x2cc>)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	089b      	lsrs	r3, r3, #2
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ca6:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <HAL_GPIO_Init+0x2dc>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	025b      	lsls	r3, r3, #9
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <HAL_GPIO_Init+0x2dc>)
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <HAL_GPIO_Init+0x2dc>)
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43da      	mvns	r2, r3
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	029b      	lsls	r3, r3, #10
 8000ce8:	4013      	ands	r3, r2
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <HAL_GPIO_Init+0x2dc>)
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <HAL_GPIO_Init+0x2dc>)
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	43da      	mvns	r2, r3
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	4013      	ands	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	035b      	lsls	r3, r3, #13
 8000d12:	4013      	ands	r3, r2
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_GPIO_Init+0x2dc>)
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <HAL_GPIO_Init+0x2dc>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	43da      	mvns	r2, r3
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	039b      	lsls	r3, r3, #14
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d003      	beq.n	8000d48 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <HAL_GPIO_Init+0x2dc>)
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	40da      	lsrs	r2, r3
 8000d5c:	1e13      	subs	r3, r2, #0
 8000d5e:	d000      	beq.n	8000d62 <HAL_GPIO_Init+0x2be>
 8000d60:	e6a8      	b.n	8000ab4 <HAL_GPIO_Init+0x10>
  } 
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b006      	add	sp, #24
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010000 	.word	0x40010000
 8000d74:	48000400 	.word	0x48000400
 8000d78:	48000800 	.word	0x48000800
 8000d7c:	48000c00 	.word	0x48000c00
 8000d80:	40010400 	.word	0x40010400

08000d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	0008      	movs	r0, r1
 8000d8e:	0011      	movs	r1, r2
 8000d90:	1cbb      	adds	r3, r7, #2
 8000d92:	1c02      	adds	r2, r0, #0
 8000d94:	801a      	strh	r2, [r3, #0]
 8000d96:	1c7b      	adds	r3, r7, #1
 8000d98:	1c0a      	adds	r2, r1, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d9c:	1c7b      	adds	r3, r7, #1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d004      	beq.n	8000dae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000da4:	1cbb      	adds	r3, r7, #2
 8000da6:	881a      	ldrh	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dac:	e003      	b.n	8000db6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dae:	1cbb      	adds	r3, r7, #2
 8000db0:	881a      	ldrh	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b002      	add	sp, #8
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e305      	b.n	80013de <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4013      	ands	r3, r2
 8000dda:	d100      	bne.n	8000dde <HAL_RCC_OscConfig+0x1e>
 8000ddc:	e08d      	b.n	8000efa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dde:	4bc5      	ldr	r3, [pc, #788]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	220c      	movs	r2, #12
 8000de4:	4013      	ands	r3, r2
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	d00e      	beq.n	8000e08 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dea:	4bc2      	ldr	r3, [pc, #776]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	220c      	movs	r2, #12
 8000df0:	4013      	ands	r3, r2
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	d116      	bne.n	8000e24 <HAL_RCC_OscConfig+0x64>
 8000df6:	4bbf      	ldr	r3, [pc, #764]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	23c0      	movs	r3, #192	; 0xc0
 8000dfc:	025b      	lsls	r3, r3, #9
 8000dfe:	401a      	ands	r2, r3
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	025b      	lsls	r3, r3, #9
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d10d      	bne.n	8000e24 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e08:	4bba      	ldr	r3, [pc, #744]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	029b      	lsls	r3, r3, #10
 8000e10:	4013      	ands	r3, r2
 8000e12:	d100      	bne.n	8000e16 <HAL_RCC_OscConfig+0x56>
 8000e14:	e070      	b.n	8000ef8 <HAL_RCC_OscConfig+0x138>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d000      	beq.n	8000e20 <HAL_RCC_OscConfig+0x60>
 8000e1e:	e06b      	b.n	8000ef8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e2dc      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d107      	bne.n	8000e3c <HAL_RCC_OscConfig+0x7c>
 8000e2c:	4bb1      	ldr	r3, [pc, #708]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4bb0      	ldr	r3, [pc, #704]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000e32:	2180      	movs	r1, #128	; 0x80
 8000e34:	0249      	lsls	r1, r1, #9
 8000e36:	430a      	orrs	r2, r1
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	e02f      	b.n	8000e9c <HAL_RCC_OscConfig+0xdc>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d10c      	bne.n	8000e5e <HAL_RCC_OscConfig+0x9e>
 8000e44:	4bab      	ldr	r3, [pc, #684]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4baa      	ldr	r3, [pc, #680]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000e4a:	49ab      	ldr	r1, [pc, #684]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e4c:	400a      	ands	r2, r1
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	4ba8      	ldr	r3, [pc, #672]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4ba7      	ldr	r3, [pc, #668]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000e56:	49a9      	ldr	r1, [pc, #676]	; (80010fc <HAL_RCC_OscConfig+0x33c>)
 8000e58:	400a      	ands	r2, r1
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	e01e      	b.n	8000e9c <HAL_RCC_OscConfig+0xdc>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b05      	cmp	r3, #5
 8000e64:	d10e      	bne.n	8000e84 <HAL_RCC_OscConfig+0xc4>
 8000e66:	4ba3      	ldr	r3, [pc, #652]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4ba2      	ldr	r3, [pc, #648]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000e6c:	2180      	movs	r1, #128	; 0x80
 8000e6e:	02c9      	lsls	r1, r1, #11
 8000e70:	430a      	orrs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	4b9f      	ldr	r3, [pc, #636]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b9e      	ldr	r3, [pc, #632]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	e00b      	b.n	8000e9c <HAL_RCC_OscConfig+0xdc>
 8000e84:	4b9b      	ldr	r3, [pc, #620]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b9a      	ldr	r3, [pc, #616]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000e8a:	499b      	ldr	r1, [pc, #620]	; (80010f8 <HAL_RCC_OscConfig+0x338>)
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	4b98      	ldr	r3, [pc, #608]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b97      	ldr	r3, [pc, #604]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000e96:	4999      	ldr	r1, [pc, #612]	; (80010fc <HAL_RCC_OscConfig+0x33c>)
 8000e98:	400a      	ands	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d014      	beq.n	8000ece <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff fd1c 	bl	80008e0 <HAL_GetTick>
 8000ea8:	0003      	movs	r3, r0
 8000eaa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eac:	e008      	b.n	8000ec0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eae:	f7ff fd17 	bl	80008e0 <HAL_GetTick>
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	2b64      	cmp	r3, #100	; 0x64
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e28e      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ec0:	4b8c      	ldr	r3, [pc, #560]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	029b      	lsls	r3, r3, #10
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d0f0      	beq.n	8000eae <HAL_RCC_OscConfig+0xee>
 8000ecc:	e015      	b.n	8000efa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ece:	f7ff fd07 	bl	80008e0 <HAL_GetTick>
 8000ed2:	0003      	movs	r3, r0
 8000ed4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed8:	f7ff fd02 	bl	80008e0 <HAL_GetTick>
 8000edc:	0002      	movs	r2, r0
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b64      	cmp	r3, #100	; 0x64
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e279      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eea:	4b82      	ldr	r3, [pc, #520]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	029b      	lsls	r3, r3, #10
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d1f0      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x118>
 8000ef6:	e000      	b.n	8000efa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	2202      	movs	r2, #2
 8000f00:	4013      	ands	r3, r2
 8000f02:	d100      	bne.n	8000f06 <HAL_RCC_OscConfig+0x146>
 8000f04:	e06c      	b.n	8000fe0 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f06:	4b7b      	ldr	r3, [pc, #492]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d00e      	beq.n	8000f2e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f10:	4b78      	ldr	r3, [pc, #480]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	220c      	movs	r2, #12
 8000f16:	4013      	ands	r3, r2
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d11f      	bne.n	8000f5c <HAL_RCC_OscConfig+0x19c>
 8000f1c:	4b75      	ldr	r3, [pc, #468]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000f1e:	685a      	ldr	r2, [r3, #4]
 8000f20:	23c0      	movs	r3, #192	; 0xc0
 8000f22:	025b      	lsls	r3, r3, #9
 8000f24:	401a      	ands	r2, r3
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d116      	bne.n	8000f5c <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f2e:	4b71      	ldr	r3, [pc, #452]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2202      	movs	r2, #2
 8000f34:	4013      	ands	r3, r2
 8000f36:	d005      	beq.n	8000f44 <HAL_RCC_OscConfig+0x184>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d001      	beq.n	8000f44 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e24c      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f44:	4b6b      	ldr	r3, [pc, #428]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	22f8      	movs	r2, #248	; 0xf8
 8000f4a:	4393      	bics	r3, r2
 8000f4c:	0019      	movs	r1, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	691b      	ldr	r3, [r3, #16]
 8000f52:	00da      	lsls	r2, r3, #3
 8000f54:	4b67      	ldr	r3, [pc, #412]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000f56:	430a      	orrs	r2, r1
 8000f58:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f5a:	e041      	b.n	8000fe0 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d024      	beq.n	8000fae <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f64:	4b63      	ldr	r3, [pc, #396]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b62      	ldr	r3, [pc, #392]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f70:	f7ff fcb6 	bl	80008e0 <HAL_GetTick>
 8000f74:	0003      	movs	r3, r0
 8000f76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f7a:	f7ff fcb1 	bl	80008e0 <HAL_GetTick>
 8000f7e:	0002      	movs	r2, r0
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e228      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8c:	4b59      	ldr	r3, [pc, #356]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2202      	movs	r2, #2
 8000f92:	4013      	ands	r3, r2
 8000f94:	d0f1      	beq.n	8000f7a <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f96:	4b57      	ldr	r3, [pc, #348]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	22f8      	movs	r2, #248	; 0xf8
 8000f9c:	4393      	bics	r3, r2
 8000f9e:	0019      	movs	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	00da      	lsls	r2, r3, #3
 8000fa6:	4b53      	ldr	r3, [pc, #332]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	e018      	b.n	8000fe0 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fae:	4b51      	ldr	r3, [pc, #324]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b50      	ldr	r3, [pc, #320]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	438a      	bics	r2, r1
 8000fb8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fba:	f7ff fc91 	bl	80008e0 <HAL_GetTick>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fc8c 	bl	80008e0 <HAL_GetTick>
 8000fc8:	0002      	movs	r2, r0
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e203      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd6:	4b47      	ldr	r3, [pc, #284]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2202      	movs	r2, #2
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d1f1      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2208      	movs	r2, #8
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	d036      	beq.n	8001058 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d019      	beq.n	8001026 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff2:	4b40      	ldr	r3, [pc, #256]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000ff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ff6:	4b3f      	ldr	r3, [pc, #252]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ffe:	f7ff fc6f 	bl	80008e0 <HAL_GetTick>
 8001002:	0003      	movs	r3, r0
 8001004:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001008:	f7ff fc6a 	bl	80008e0 <HAL_GetTick>
 800100c:	0002      	movs	r2, r0
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e1e1      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101a:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 800101c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101e:	2202      	movs	r2, #2
 8001020:	4013      	ands	r3, r2
 8001022:	d0f1      	beq.n	8001008 <HAL_RCC_OscConfig+0x248>
 8001024:	e018      	b.n	8001058 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001026:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8001028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800102a:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 800102c:	2101      	movs	r1, #1
 800102e:	438a      	bics	r2, r1
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001032:	f7ff fc55 	bl	80008e0 <HAL_GetTick>
 8001036:	0003      	movs	r3, r0
 8001038:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800103c:	f7ff fc50 	bl	80008e0 <HAL_GetTick>
 8001040:	0002      	movs	r2, r0
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e1c7      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800104e:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	2202      	movs	r2, #2
 8001054:	4013      	ands	r3, r2
 8001056:	d1f1      	bne.n	800103c <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2204      	movs	r2, #4
 800105e:	4013      	ands	r3, r2
 8001060:	d100      	bne.n	8001064 <HAL_RCC_OscConfig+0x2a4>
 8001062:	e0b5      	b.n	80011d0 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001064:	201f      	movs	r0, #31
 8001066:	183b      	adds	r3, r7, r0
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 800106e:	69da      	ldr	r2, [r3, #28]
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	055b      	lsls	r3, r3, #21
 8001074:	4013      	ands	r3, r2
 8001076:	d110      	bne.n	800109a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 800107a:	69da      	ldr	r2, [r3, #28]
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	0549      	lsls	r1, r1, #21
 8001082:	430a      	orrs	r2, r1
 8001084:	61da      	str	r2, [r3, #28]
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 8001088:	69da      	ldr	r2, [r3, #28]
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	055b      	lsls	r3, r3, #21
 800108e:	4013      	ands	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001094:	183b      	adds	r3, r7, r0
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_RCC_OscConfig+0x340>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4013      	ands	r3, r2
 80010a4:	d11a      	bne.n	80010dc <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_RCC_OscConfig+0x340>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_RCC_OscConfig+0x340>)
 80010ac:	2180      	movs	r1, #128	; 0x80
 80010ae:	0049      	lsls	r1, r1, #1
 80010b0:	430a      	orrs	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010b4:	f7ff fc14 	bl	80008e0 <HAL_GetTick>
 80010b8:	0003      	movs	r3, r0
 80010ba:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010be:	f7ff fc0f 	bl	80008e0 <HAL_GetTick>
 80010c2:	0002      	movs	r2, r0
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b64      	cmp	r3, #100	; 0x64
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e186      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <HAL_RCC_OscConfig+0x340>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4013      	ands	r3, r2
 80010da:	d0f0      	beq.n	80010be <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d10f      	bne.n	8001104 <HAL_RCC_OscConfig+0x344>
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 80010e6:	6a1a      	ldr	r2, [r3, #32]
 80010e8:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <HAL_RCC_OscConfig+0x334>)
 80010ea:	2101      	movs	r1, #1
 80010ec:	430a      	orrs	r2, r1
 80010ee:	621a      	str	r2, [r3, #32]
 80010f0:	e036      	b.n	8001160 <HAL_RCC_OscConfig+0x3a0>
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	40021000 	.word	0x40021000
 80010f8:	fffeffff 	.word	0xfffeffff
 80010fc:	fffbffff 	.word	0xfffbffff
 8001100:	40007000 	.word	0x40007000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d10c      	bne.n	8001126 <HAL_RCC_OscConfig+0x366>
 800110c:	4bb6      	ldr	r3, [pc, #728]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 800110e:	6a1a      	ldr	r2, [r3, #32]
 8001110:	4bb5      	ldr	r3, [pc, #724]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001112:	2101      	movs	r1, #1
 8001114:	438a      	bics	r2, r1
 8001116:	621a      	str	r2, [r3, #32]
 8001118:	4bb3      	ldr	r3, [pc, #716]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 800111a:	6a1a      	ldr	r2, [r3, #32]
 800111c:	4bb2      	ldr	r3, [pc, #712]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 800111e:	2104      	movs	r1, #4
 8001120:	438a      	bics	r2, r1
 8001122:	621a      	str	r2, [r3, #32]
 8001124:	e01c      	b.n	8001160 <HAL_RCC_OscConfig+0x3a0>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b05      	cmp	r3, #5
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x388>
 800112e:	4bae      	ldr	r3, [pc, #696]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001130:	6a1a      	ldr	r2, [r3, #32]
 8001132:	4bad      	ldr	r3, [pc, #692]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001134:	2104      	movs	r1, #4
 8001136:	430a      	orrs	r2, r1
 8001138:	621a      	str	r2, [r3, #32]
 800113a:	4bab      	ldr	r3, [pc, #684]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 800113c:	6a1a      	ldr	r2, [r3, #32]
 800113e:	4baa      	ldr	r3, [pc, #680]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001140:	2101      	movs	r1, #1
 8001142:	430a      	orrs	r2, r1
 8001144:	621a      	str	r2, [r3, #32]
 8001146:	e00b      	b.n	8001160 <HAL_RCC_OscConfig+0x3a0>
 8001148:	4ba7      	ldr	r3, [pc, #668]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 800114a:	6a1a      	ldr	r2, [r3, #32]
 800114c:	4ba6      	ldr	r3, [pc, #664]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 800114e:	2101      	movs	r1, #1
 8001150:	438a      	bics	r2, r1
 8001152:	621a      	str	r2, [r3, #32]
 8001154:	4ba4      	ldr	r3, [pc, #656]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001156:	6a1a      	ldr	r2, [r3, #32]
 8001158:	4ba3      	ldr	r3, [pc, #652]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 800115a:	2104      	movs	r1, #4
 800115c:	438a      	bics	r2, r1
 800115e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d014      	beq.n	8001192 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001168:	f7ff fbba 	bl	80008e0 <HAL_GetTick>
 800116c:	0003      	movs	r3, r0
 800116e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001170:	e009      	b.n	8001186 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001172:	f7ff fbb5 	bl	80008e0 <HAL_GetTick>
 8001176:	0002      	movs	r2, r0
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	4a9b      	ldr	r2, [pc, #620]	; (80013ec <HAL_RCC_OscConfig+0x62c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e12b      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001186:	4b98      	ldr	r3, [pc, #608]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	2202      	movs	r2, #2
 800118c:	4013      	ands	r3, r2
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x3b2>
 8001190:	e013      	b.n	80011ba <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001192:	f7ff fba5 	bl	80008e0 <HAL_GetTick>
 8001196:	0003      	movs	r3, r0
 8001198:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800119a:	e009      	b.n	80011b0 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800119c:	f7ff fba0 	bl	80008e0 <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	4a91      	ldr	r2, [pc, #580]	; (80013ec <HAL_RCC_OscConfig+0x62c>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e116      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b0:	4b8d      	ldr	r3, [pc, #564]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	2202      	movs	r2, #2
 80011b6:	4013      	ands	r3, r2
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011ba:	231f      	movs	r3, #31
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d105      	bne.n	80011d0 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c4:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 80011c6:	69da      	ldr	r2, [r3, #28]
 80011c8:	4b87      	ldr	r3, [pc, #540]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 80011ca:	4989      	ldr	r1, [pc, #548]	; (80013f0 <HAL_RCC_OscConfig+0x630>)
 80011cc:	400a      	ands	r2, r1
 80011ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2210      	movs	r2, #16
 80011d6:	4013      	ands	r3, r2
 80011d8:	d063      	beq.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d12a      	bne.n	8001238 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80011e2:	4b81      	ldr	r3, [pc, #516]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 80011e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011e6:	4b80      	ldr	r3, [pc, #512]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 80011e8:	2104      	movs	r1, #4
 80011ea:	430a      	orrs	r2, r1
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011ee:	4b7e      	ldr	r3, [pc, #504]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 80011f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011f2:	4b7d      	ldr	r3, [pc, #500]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 80011f4:	2101      	movs	r1, #1
 80011f6:	430a      	orrs	r2, r1
 80011f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fb71 	bl	80008e0 <HAL_GetTick>
 80011fe:	0003      	movs	r3, r0
 8001200:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001204:	f7ff fb6c 	bl	80008e0 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e0e3      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001216:	4b74      	ldr	r3, [pc, #464]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800121a:	2202      	movs	r2, #2
 800121c:	4013      	ands	r3, r2
 800121e:	d0f1      	beq.n	8001204 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001220:	4b71      	ldr	r3, [pc, #452]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001224:	22f8      	movs	r2, #248	; 0xf8
 8001226:	4393      	bics	r3, r2
 8001228:	0019      	movs	r1, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	00da      	lsls	r2, r3, #3
 8001230:	4b6d      	ldr	r3, [pc, #436]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001232:	430a      	orrs	r2, r1
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
 8001236:	e034      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	3305      	adds	r3, #5
 800123e:	d111      	bne.n	8001264 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001240:	4b69      	ldr	r3, [pc, #420]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001244:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001246:	2104      	movs	r1, #4
 8001248:	438a      	bics	r2, r1
 800124a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800124c:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 800124e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001250:	22f8      	movs	r2, #248	; 0xf8
 8001252:	4393      	bics	r3, r2
 8001254:	0019      	movs	r1, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	00da      	lsls	r2, r3, #3
 800125c:	4b62      	ldr	r3, [pc, #392]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 800125e:	430a      	orrs	r2, r1
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
 8001262:	e01e      	b.n	80012a2 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001264:	4b60      	ldr	r3, [pc, #384]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001266:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001268:	4b5f      	ldr	r3, [pc, #380]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 800126a:	2104      	movs	r1, #4
 800126c:	430a      	orrs	r2, r1
 800126e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001270:	4b5d      	ldr	r3, [pc, #372]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001274:	4b5c      	ldr	r3, [pc, #368]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001276:	2101      	movs	r1, #1
 8001278:	438a      	bics	r2, r1
 800127a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800127c:	f7ff fb30 	bl	80008e0 <HAL_GetTick>
 8001280:	0003      	movs	r3, r0
 8001282:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001284:	e008      	b.n	8001298 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001286:	f7ff fb2b 	bl	80008e0 <HAL_GetTick>
 800128a:	0002      	movs	r2, r0
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e0a2      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001298:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 800129a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129c:	2202      	movs	r2, #2
 800129e:	4013      	ands	r3, r2
 80012a0:	d1f1      	bne.n	8001286 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d100      	bne.n	80012ac <HAL_RCC_OscConfig+0x4ec>
 80012aa:	e097      	b.n	80013dc <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012ac:	4b4e      	ldr	r3, [pc, #312]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	220c      	movs	r2, #12
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d100      	bne.n	80012ba <HAL_RCC_OscConfig+0x4fa>
 80012b8:	e06b      	b.n	8001392 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d14c      	bne.n	800135c <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c2:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b48      	ldr	r3, [pc, #288]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 80012c8:	494a      	ldr	r1, [pc, #296]	; (80013f4 <HAL_RCC_OscConfig+0x634>)
 80012ca:	400a      	ands	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ce:	f7ff fb07 	bl	80008e0 <HAL_GetTick>
 80012d2:	0003      	movs	r3, r0
 80012d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d8:	f7ff fb02 	bl	80008e0 <HAL_GetTick>
 80012dc:	0002      	movs	r2, r0
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e079      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ea:	4b3f      	ldr	r3, [pc, #252]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	049b      	lsls	r3, r3, #18
 80012f2:	4013      	ands	r3, r2
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012f6:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	220f      	movs	r2, #15
 80012fc:	4393      	bics	r3, r2
 80012fe:	0019      	movs	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001304:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001306:	430a      	orrs	r2, r1
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a3a      	ldr	r2, [pc, #232]	; (80013f8 <HAL_RCC_OscConfig+0x638>)
 8001310:	4013      	ands	r3, r2
 8001312:	0019      	movs	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131c:	431a      	orrs	r2, r3
 800131e:	4b32      	ldr	r3, [pc, #200]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001320:	430a      	orrs	r2, r1
 8001322:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001324:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b2f      	ldr	r3, [pc, #188]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	0449      	lsls	r1, r1, #17
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff fad5 	bl	80008e0 <HAL_GetTick>
 8001336:	0003      	movs	r3, r0
 8001338:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133c:	f7ff fad0 	bl	80008e0 <HAL_GetTick>
 8001340:	0002      	movs	r2, r0
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e047      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	049b      	lsls	r3, r3, #18
 8001356:	4013      	ands	r3, r2
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0x57c>
 800135a:	e03f      	b.n	80013dc <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001362:	4924      	ldr	r1, [pc, #144]	; (80013f4 <HAL_RCC_OscConfig+0x634>)
 8001364:	400a      	ands	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff faba 	bl	80008e0 <HAL_GetTick>
 800136c:	0003      	movs	r3, r0
 800136e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001372:	f7ff fab5 	bl	80008e0 <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e02c      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	049b      	lsls	r3, r3, #18
 800138c:	4013      	ands	r3, r2
 800138e:	d1f0      	bne.n	8001372 <HAL_RCC_OscConfig+0x5b2>
 8001390:	e024      	b.n	80013dc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e01f      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <HAL_RCC_OscConfig+0x628>)
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	23c0      	movs	r3, #192	; 0xc0
 80013ae:	025b      	lsls	r3, r3, #9
 80013b0:	401a      	ands	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d10e      	bne.n	80013d8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	220f      	movs	r2, #15
 80013be:	401a      	ands	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d107      	bne.n	80013d8 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	23f0      	movs	r3, #240	; 0xf0
 80013cc:	039b      	lsls	r3, r3, #14
 80013ce:	401a      	ands	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d001      	beq.n	80013dc <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b008      	add	sp, #32
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	40021000 	.word	0x40021000
 80013ec:	00001388 	.word	0x00001388
 80013f0:	efffffff 	.word	0xefffffff
 80013f4:	feffffff 	.word	0xfeffffff
 80013f8:	ffc27fff 	.word	0xffc27fff

080013fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0b3      	b.n	8001578 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001410:	4b5b      	ldr	r3, [pc, #364]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2201      	movs	r2, #1
 8001416:	4013      	ands	r3, r2
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d911      	bls.n	8001442 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141e:	4b58      	ldr	r3, [pc, #352]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2201      	movs	r2, #1
 8001424:	4393      	bics	r3, r2
 8001426:	0019      	movs	r1, r3
 8001428:	4b55      	ldr	r3, [pc, #340]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001430:	4b53      	ldr	r3, [pc, #332]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2201      	movs	r2, #1
 8001436:	4013      	ands	r3, r2
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d001      	beq.n	8001442 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e09a      	b.n	8001578 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2202      	movs	r2, #2
 8001448:	4013      	ands	r3, r2
 800144a:	d015      	beq.n	8001478 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2204      	movs	r2, #4
 8001452:	4013      	ands	r3, r2
 8001454:	d006      	beq.n	8001464 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001456:	4b4b      	ldr	r3, [pc, #300]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	4b4a      	ldr	r3, [pc, #296]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 800145c:	21e0      	movs	r1, #224	; 0xe0
 800145e:	00c9      	lsls	r1, r1, #3
 8001460:	430a      	orrs	r2, r1
 8001462:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001464:	4b47      	ldr	r3, [pc, #284]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	22f0      	movs	r2, #240	; 0xf0
 800146a:	4393      	bics	r3, r2
 800146c:	0019      	movs	r1, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	4b44      	ldr	r3, [pc, #272]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 8001474:	430a      	orrs	r2, r1
 8001476:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2201      	movs	r2, #1
 800147e:	4013      	ands	r3, r2
 8001480:	d040      	beq.n	8001504 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d107      	bne.n	800149a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	029b      	lsls	r3, r3, #10
 8001492:	4013      	ands	r3, r2
 8001494:	d114      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e06e      	b.n	8001578 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a2:	4b38      	ldr	r3, [pc, #224]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	049b      	lsls	r3, r3, #18
 80014aa:	4013      	ands	r3, r2
 80014ac:	d108      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e062      	b.n	8001578 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2202      	movs	r2, #2
 80014b8:	4013      	ands	r3, r2
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e05b      	b.n	8001578 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2203      	movs	r2, #3
 80014c6:	4393      	bics	r3, r2
 80014c8:	0019      	movs	r1, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	4b2d      	ldr	r3, [pc, #180]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 80014d0:	430a      	orrs	r2, r1
 80014d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d4:	f7ff fa04 	bl	80008e0 <HAL_GetTick>
 80014d8:	0003      	movs	r3, r0
 80014da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014dc:	e009      	b.n	80014f2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014de:	f7ff f9ff 	bl	80008e0 <HAL_GetTick>
 80014e2:	0002      	movs	r2, r0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	4a27      	ldr	r2, [pc, #156]	; (8001588 <HAL_RCC_ClockConfig+0x18c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e042      	b.n	8001578 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	220c      	movs	r2, #12
 80014f8:	401a      	ands	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	429a      	cmp	r2, r3
 8001502:	d1ec      	bne.n	80014de <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2201      	movs	r2, #1
 800150a:	4013      	ands	r3, r2
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d211      	bcs.n	8001536 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2201      	movs	r2, #1
 8001518:	4393      	bics	r3, r2
 800151a:	0019      	movs	r1, r3
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_RCC_ClockConfig+0x184>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4013      	ands	r3, r2
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d001      	beq.n	8001536 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e020      	b.n	8001578 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2204      	movs	r2, #4
 800153c:	4013      	ands	r3, r2
 800153e:	d009      	beq.n	8001554 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a11      	ldr	r2, [pc, #68]	; (800158c <HAL_RCC_ClockConfig+0x190>)
 8001546:	4013      	ands	r3, r2
 8001548:	0019      	movs	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68da      	ldr	r2, [r3, #12]
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 8001550:	430a      	orrs	r2, r1
 8001552:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001554:	f000 f820 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8001558:	0001      	movs	r1, r0
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_RCC_ClockConfig+0x188>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	220f      	movs	r2, #15
 8001562:	4013      	ands	r3, r2
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_RCC_ClockConfig+0x194>)
 8001566:	5cd3      	ldrb	r3, [r2, r3]
 8001568:	000a      	movs	r2, r1
 800156a:	40da      	lsrs	r2, r3
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_RCC_ClockConfig+0x198>)
 800156e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001570:	2000      	movs	r0, #0
 8001572:	f7ff f96f 	bl	8000854 <HAL_InitTick>
  
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	0018      	movs	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	b004      	add	sp, #16
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40022000 	.word	0x40022000
 8001584:	40021000 	.word	0x40021000
 8001588:	00001388 	.word	0x00001388
 800158c:	fffff8ff 	.word	0xfffff8ff
 8001590:	0800230c 	.word	0x0800230c
 8001594:	20000000 	.word	0x20000000

08001598 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b08f      	sub	sp, #60	; 0x3c
 800159c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800159e:	2314      	movs	r3, #20
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	4a2c      	ldr	r2, [pc, #176]	; (8001654 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015a6:	c313      	stmia	r3!, {r0, r1, r4}
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4a2a      	ldr	r2, [pc, #168]	; (8001658 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80015b2:	c313      	stmia	r3!, {r0, r1, r4}
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c0:	2300      	movs	r3, #0
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
 80015c4:	2300      	movs	r3, #0
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <HAL_RCC_GetSysClockFreq+0xc4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d4:	220c      	movs	r2, #12
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d002      	beq.n	80015e2 <HAL_RCC_GetSysClockFreq+0x4a>
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d003      	beq.n	80015e8 <HAL_RCC_GetSysClockFreq+0x50>
 80015e0:	e02f      	b.n	8001642 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_RCC_GetSysClockFreq+0xc8>)
 80015e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015e6:	e02f      	b.n	8001648 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80015e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ea:	0c9b      	lsrs	r3, r3, #18
 80015ec:	220f      	movs	r2, #15
 80015ee:	4013      	ands	r3, r2
 80015f0:	2214      	movs	r2, #20
 80015f2:	18ba      	adds	r2, r7, r2
 80015f4:	5cd3      	ldrb	r3, [r2, r3]
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_RCC_GetSysClockFreq+0xc4>)
 80015fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fc:	220f      	movs	r2, #15
 80015fe:	4013      	ands	r3, r2
 8001600:	1d3a      	adds	r2, r7, #4
 8001602:	5cd3      	ldrb	r3, [r2, r3]
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001608:	23c0      	movs	r3, #192	; 0xc0
 800160a:	025b      	lsls	r3, r3, #9
 800160c:	401a      	ands	r2, r3
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	025b      	lsls	r3, r3, #9
 8001612:	429a      	cmp	r2, r3
 8001614:	d109      	bne.n	800162a <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001618:	4811      	ldr	r0, [pc, #68]	; (8001660 <HAL_RCC_GetSysClockFreq+0xc8>)
 800161a:	f7fe fd75 	bl	8000108 <__udivsi3>
 800161e:	0003      	movs	r3, r0
 8001620:	001a      	movs	r2, r3
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	4353      	muls	r3, r2
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
 8001628:	e008      	b.n	800163c <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800162a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800162c:	480c      	ldr	r0, [pc, #48]	; (8001660 <HAL_RCC_GetSysClockFreq+0xc8>)
 800162e:	f7fe fd6b 	bl	8000108 <__udivsi3>
 8001632:	0003      	movs	r3, r0
 8001634:	001a      	movs	r2, r3
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	4353      	muls	r3, r2
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800163c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001640:	e002      	b.n	8001648 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001644:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001646:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b00f      	add	sp, #60	; 0x3c
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	080022ec 	.word	0x080022ec
 8001658:	080022fc 	.word	0x080022fc
 800165c:	40021000 	.word	0x40021000
 8001660:	007a1200 	.word	0x007a1200

08001664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001668:	4b02      	ldr	r3, [pc, #8]	; (8001674 <HAL_RCC_GetHCLKFreq+0x10>)
 800166a:	681b      	ldr	r3, [r3, #0]
}
 800166c:	0018      	movs	r0, r3
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	20000000 	.word	0x20000000

08001678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800167c:	f7ff fff2 	bl	8001664 <HAL_RCC_GetHCLKFreq>
 8001680:	0001      	movs	r1, r0
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	2207      	movs	r2, #7
 800168a:	4013      	ands	r3, r2
 800168c:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800168e:	5cd3      	ldrb	r3, [r2, r3]
 8001690:	40d9      	lsrs	r1, r3
 8001692:	000b      	movs	r3, r1
}    
 8001694:	0018      	movs	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	46c0      	nop			; (mov r8, r8)
 800169c:	40021000 	.word	0x40021000
 80016a0:	0800231c 	.word	0x0800231c

080016a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d101      	bne.n	80016b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e042      	b.n	800173c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	223d      	movs	r2, #61	; 0x3d
 80016ba:	5c9b      	ldrb	r3, [r3, r2]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d107      	bne.n	80016d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	223c      	movs	r2, #60	; 0x3c
 80016c6:	2100      	movs	r1, #0
 80016c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7fe fffd 	bl	80006cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	223d      	movs	r2, #61	; 0x3d
 80016d6:	2102      	movs	r1, #2
 80016d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3304      	adds	r3, #4
 80016e2:	0019      	movs	r1, r3
 80016e4:	0010      	movs	r0, r2
 80016e6:	f000 f93b 	bl	8001960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2246      	movs	r2, #70	; 0x46
 80016ee:	2101      	movs	r1, #1
 80016f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	223e      	movs	r2, #62	; 0x3e
 80016f6:	2101      	movs	r1, #1
 80016f8:	5499      	strb	r1, [r3, r2]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	223f      	movs	r2, #63	; 0x3f
 80016fe:	2101      	movs	r1, #1
 8001700:	5499      	strb	r1, [r3, r2]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2240      	movs	r2, #64	; 0x40
 8001706:	2101      	movs	r1, #1
 8001708:	5499      	strb	r1, [r3, r2]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2241      	movs	r2, #65	; 0x41
 800170e:	2101      	movs	r1, #1
 8001710:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2242      	movs	r2, #66	; 0x42
 8001716:	2101      	movs	r1, #1
 8001718:	5499      	strb	r1, [r3, r2]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2243      	movs	r2, #67	; 0x43
 800171e:	2101      	movs	r1, #1
 8001720:	5499      	strb	r1, [r3, r2]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2244      	movs	r2, #68	; 0x44
 8001726:	2101      	movs	r1, #1
 8001728:	5499      	strb	r1, [r3, r2]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2245      	movs	r2, #69	; 0x45
 800172e:	2101      	movs	r1, #1
 8001730:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	223d      	movs	r2, #61	; 0x3d
 8001736:	2101      	movs	r1, #1
 8001738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	223d      	movs	r2, #61	; 0x3d
 8001750:	5c9b      	ldrb	r3, [r3, r2]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d001      	beq.n	800175c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e02d      	b.n	80017b8 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	223d      	movs	r2, #61	; 0x3d
 8001760:	2102      	movs	r1, #2
 8001762:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <HAL_TIM_Base_Start+0x7c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d009      	beq.n	8001782 <HAL_TIM_Base_Start+0x3e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <HAL_TIM_Base_Start+0x80>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d004      	beq.n	8001782 <HAL_TIM_Base_Start+0x3e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <HAL_TIM_Base_Start+0x84>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d111      	bne.n	80017a6 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2207      	movs	r2, #7
 800178a:	4013      	ands	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2b06      	cmp	r3, #6
 8001792:	d010      	beq.n	80017b6 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2101      	movs	r1, #1
 80017a0:	430a      	orrs	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017a4:	e007      	b.n	80017b6 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2101      	movs	r1, #1
 80017b2:	430a      	orrs	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	0018      	movs	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b004      	add	sp, #16
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40012c00 	.word	0x40012c00
 80017c4:	40000400 	.word	0x40000400
 80017c8:	40014000 	.word	0x40014000

080017cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	223c      	movs	r2, #60	; 0x3c
 80017da:	5c9b      	ldrb	r3, [r3, r2]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_TIM_ConfigClockSource+0x18>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e0b7      	b.n	8001954 <HAL_TIM_ConfigClockSource+0x188>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	223c      	movs	r2, #60	; 0x3c
 80017e8:	2101      	movs	r1, #1
 80017ea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	223d      	movs	r2, #61	; 0x3d
 80017f0:	2102      	movs	r1, #2
 80017f2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2277      	movs	r2, #119	; 0x77
 8001800:	4393      	bics	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4a55      	ldr	r2, [pc, #340]	; (800195c <HAL_TIM_ConfigClockSource+0x190>)
 8001808:	4013      	ands	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	0192      	lsls	r2, r2, #6
 800181c:	4293      	cmp	r3, r2
 800181e:	d040      	beq.n	80018a2 <HAL_TIM_ConfigClockSource+0xd6>
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	0192      	lsls	r2, r2, #6
 8001824:	4293      	cmp	r3, r2
 8001826:	d900      	bls.n	800182a <HAL_TIM_ConfigClockSource+0x5e>
 8001828:	e088      	b.n	800193c <HAL_TIM_ConfigClockSource+0x170>
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	0152      	lsls	r2, r2, #5
 800182e:	4293      	cmp	r3, r2
 8001830:	d100      	bne.n	8001834 <HAL_TIM_ConfigClockSource+0x68>
 8001832:	e085      	b.n	8001940 <HAL_TIM_ConfigClockSource+0x174>
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	0152      	lsls	r2, r2, #5
 8001838:	4293      	cmp	r3, r2
 800183a:	d900      	bls.n	800183e <HAL_TIM_ConfigClockSource+0x72>
 800183c:	e07e      	b.n	800193c <HAL_TIM_ConfigClockSource+0x170>
 800183e:	2b70      	cmp	r3, #112	; 0x70
 8001840:	d018      	beq.n	8001874 <HAL_TIM_ConfigClockSource+0xa8>
 8001842:	d900      	bls.n	8001846 <HAL_TIM_ConfigClockSource+0x7a>
 8001844:	e07a      	b.n	800193c <HAL_TIM_ConfigClockSource+0x170>
 8001846:	2b60      	cmp	r3, #96	; 0x60
 8001848:	d04f      	beq.n	80018ea <HAL_TIM_ConfigClockSource+0x11e>
 800184a:	d900      	bls.n	800184e <HAL_TIM_ConfigClockSource+0x82>
 800184c:	e076      	b.n	800193c <HAL_TIM_ConfigClockSource+0x170>
 800184e:	2b50      	cmp	r3, #80	; 0x50
 8001850:	d03b      	beq.n	80018ca <HAL_TIM_ConfigClockSource+0xfe>
 8001852:	d900      	bls.n	8001856 <HAL_TIM_ConfigClockSource+0x8a>
 8001854:	e072      	b.n	800193c <HAL_TIM_ConfigClockSource+0x170>
 8001856:	2b40      	cmp	r3, #64	; 0x40
 8001858:	d057      	beq.n	800190a <HAL_TIM_ConfigClockSource+0x13e>
 800185a:	d900      	bls.n	800185e <HAL_TIM_ConfigClockSource+0x92>
 800185c:	e06e      	b.n	800193c <HAL_TIM_ConfigClockSource+0x170>
 800185e:	2b30      	cmp	r3, #48	; 0x30
 8001860:	d063      	beq.n	800192a <HAL_TIM_ConfigClockSource+0x15e>
 8001862:	d86b      	bhi.n	800193c <HAL_TIM_ConfigClockSource+0x170>
 8001864:	2b20      	cmp	r3, #32
 8001866:	d060      	beq.n	800192a <HAL_TIM_ConfigClockSource+0x15e>
 8001868:	d868      	bhi.n	800193c <HAL_TIM_ConfigClockSource+0x170>
 800186a:	2b00      	cmp	r3, #0
 800186c:	d05d      	beq.n	800192a <HAL_TIM_ConfigClockSource+0x15e>
 800186e:	2b10      	cmp	r3, #16
 8001870:	d05b      	beq.n	800192a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001872:	e063      	b.n	800193c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	6899      	ldr	r1, [r3, #8]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f000 f95c 	bl	8001b40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2277      	movs	r2, #119	; 0x77
 8001894:	4313      	orrs	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	609a      	str	r2, [r3, #8]
      break;
 80018a0:	e04f      	b.n	8001942 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	6899      	ldr	r1, [r3, #8]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f000 f945 	bl	8001b40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2180      	movs	r1, #128	; 0x80
 80018c2:	01c9      	lsls	r1, r1, #7
 80018c4:	430a      	orrs	r2, r1
 80018c6:	609a      	str	r2, [r3, #8]
      break;
 80018c8:	e03b      	b.n	8001942 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	6859      	ldr	r1, [r3, #4]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	001a      	movs	r2, r3
 80018d8:	f000 f8b8 	bl	8001a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2150      	movs	r1, #80	; 0x50
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 f912 	bl	8001b0c <TIM_ITRx_SetConfig>
      break;
 80018e8:	e02b      	b.n	8001942 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6818      	ldr	r0, [r3, #0]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	6859      	ldr	r1, [r3, #4]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	001a      	movs	r2, r3
 80018f8:	f000 f8d6 	bl	8001aa8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2160      	movs	r1, #96	; 0x60
 8001902:	0018      	movs	r0, r3
 8001904:	f000 f902 	bl	8001b0c <TIM_ITRx_SetConfig>
      break;
 8001908:	e01b      	b.n	8001942 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6859      	ldr	r1, [r3, #4]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	001a      	movs	r2, r3
 8001918:	f000 f898 	bl	8001a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2140      	movs	r1, #64	; 0x40
 8001922:	0018      	movs	r0, r3
 8001924:	f000 f8f2 	bl	8001b0c <TIM_ITRx_SetConfig>
      break;
 8001928:	e00b      	b.n	8001942 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	0019      	movs	r1, r3
 8001934:	0010      	movs	r0, r2
 8001936:	f000 f8e9 	bl	8001b0c <TIM_ITRx_SetConfig>
        break;
 800193a:	e002      	b.n	8001942 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	e000      	b.n	8001942 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001940:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	223d      	movs	r2, #61	; 0x3d
 8001946:	2101      	movs	r1, #1
 8001948:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	223c      	movs	r2, #60	; 0x3c
 800194e:	2100      	movs	r1, #0
 8001950:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	0018      	movs	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	b004      	add	sp, #16
 800195a:	bd80      	pop	{r7, pc}
 800195c:	ffff00ff 	.word	0xffff00ff

08001960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4a2f      	ldr	r2, [pc, #188]	; (8001a30 <TIM_Base_SetConfig+0xd0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d003      	beq.n	8001980 <TIM_Base_SetConfig+0x20>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a2e      	ldr	r2, [pc, #184]	; (8001a34 <TIM_Base_SetConfig+0xd4>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d108      	bne.n	8001992 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2270      	movs	r2, #112	; 0x70
 8001984:	4393      	bics	r3, r2
 8001986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <TIM_Base_SetConfig+0xd0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d013      	beq.n	80019c2 <TIM_Base_SetConfig+0x62>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <TIM_Base_SetConfig+0xd4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00f      	beq.n	80019c2 <TIM_Base_SetConfig+0x62>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <TIM_Base_SetConfig+0xd8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00b      	beq.n	80019c2 <TIM_Base_SetConfig+0x62>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <TIM_Base_SetConfig+0xdc>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d007      	beq.n	80019c2 <TIM_Base_SetConfig+0x62>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <TIM_Base_SetConfig+0xe0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d003      	beq.n	80019c2 <TIM_Base_SetConfig+0x62>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <TIM_Base_SetConfig+0xe4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d108      	bne.n	80019d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <TIM_Base_SetConfig+0xe8>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	4393      	bics	r3, r2
 80019da:	001a      	movs	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a0c      	ldr	r2, [pc, #48]	; (8001a30 <TIM_Base_SetConfig+0xd0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00b      	beq.n	8001a1a <TIM_Base_SetConfig+0xba>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a0d      	ldr	r2, [pc, #52]	; (8001a3c <TIM_Base_SetConfig+0xdc>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d007      	beq.n	8001a1a <TIM_Base_SetConfig+0xba>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <TIM_Base_SetConfig+0xe0>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d003      	beq.n	8001a1a <TIM_Base_SetConfig+0xba>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <TIM_Base_SetConfig+0xe4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d103      	bne.n	8001a22 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	615a      	str	r2, [r3, #20]
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b004      	add	sp, #16
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40012c00 	.word	0x40012c00
 8001a34:	40000400 	.word	0x40000400
 8001a38:	40002000 	.word	0x40002000
 8001a3c:	40014000 	.word	0x40014000
 8001a40:	40014400 	.word	0x40014400
 8001a44:	40014800 	.word	0x40014800
 8001a48:	fffffcff 	.word	0xfffffcff

08001a4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	2201      	movs	r2, #1
 8001a64:	4393      	bics	r3, r2
 8001a66:	001a      	movs	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	22f0      	movs	r2, #240	; 0xf0
 8001a76:	4393      	bics	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	220a      	movs	r2, #10
 8001a88:	4393      	bics	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	621a      	str	r2, [r3, #32]
}
 8001aa0:	46c0      	nop			; (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b006      	add	sp, #24
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	2210      	movs	r2, #16
 8001aba:	4393      	bics	r3, r2
 8001abc:	001a      	movs	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <TIM_TI2_ConfigInputStage+0x60>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	031b      	lsls	r3, r3, #12
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	22a0      	movs	r2, #160	; 0xa0
 8001ae4:	4393      	bics	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	621a      	str	r2, [r3, #32]
}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b006      	add	sp, #24
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	ffff0fff 	.word	0xffff0fff

08001b0c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2270      	movs	r2, #112	; 0x70
 8001b20:	4393      	bics	r3, r2
 8001b22:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	2207      	movs	r2, #7
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	609a      	str	r2, [r3, #8]
}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	b004      	add	sp, #16
 8001b3c:	bd80      	pop	{r7, pc}
	...

08001b40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <TIM_ETR_SetConfig+0x3c>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	021a      	lsls	r2, r3, #8
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	609a      	str	r2, [r3, #8]
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b006      	add	sp, #24
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	ffff00ff 	.word	0xffff00ff

08001b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	223c      	movs	r2, #60	; 0x3c
 8001b8e:	5c9b      	ldrb	r3, [r3, r2]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e041      	b.n	8001c1c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	223c      	movs	r2, #60	; 0x3c
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	223d      	movs	r2, #61	; 0x3d
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2270      	movs	r2, #112	; 0x70
 8001bbc:	4393      	bics	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a13      	ldr	r2, [pc, #76]	; (8001c24 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d009      	beq.n	8001bf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a11      	ldr	r2, [pc, #68]	; (8001c28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d004      	beq.n	8001bf0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d10c      	bne.n	8001c0a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	4393      	bics	r3, r2
 8001bf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	68ba      	ldr	r2, [r7, #8]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	223d      	movs	r2, #61	; 0x3d
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	223c      	movs	r2, #60	; 0x3c
 8001c16:	2100      	movs	r1, #0
 8001c18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b004      	add	sp, #16
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40012c00 	.word	0x40012c00
 8001c28:	40000400 	.word	0x40000400
 8001c2c:	40014000 	.word	0x40014000

08001c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e044      	b.n	8001ccc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d107      	bne.n	8001c5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2274      	movs	r2, #116	; 0x74
 8001c4e:	2100      	movs	r1, #0
 8001c50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7fe fd57 	bl	8000708 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2224      	movs	r2, #36	; 0x24
 8001c5e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	438a      	bics	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 f830 	bl	8001cd8 <UART_SetConfig>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e024      	b.n	8001ccc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 f97b 	bl	8001f88 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	490d      	ldr	r1, [pc, #52]	; (8001cd4 <HAL_UART_Init+0xa4>)
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2108      	movs	r1, #8
 8001cae:	438a      	bics	r2, r1
 8001cb0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f000 fa13 	bl	80020f0 <UART_CheckIdleState>
 8001cca:	0003      	movs	r3, r0
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b002      	add	sp, #8
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	fffff7ff 	.word	0xfffff7ff

08001cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ce0:	231e      	movs	r3, #30
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	691b      	ldr	r3, [r3, #16]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a97      	ldr	r2, [pc, #604]	; (8001f64 <UART_SetConfig+0x28c>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	4a92      	ldr	r2, [pc, #584]	; (8001f68 <UART_SetConfig+0x290>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	0019      	movs	r1, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	4a89      	ldr	r2, [pc, #548]	; (8001f6c <UART_SetConfig+0x294>)
 8001d46:	4013      	ands	r3, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a85      	ldr	r2, [pc, #532]	; (8001f70 <UART_SetConfig+0x298>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d127      	bne.n	8001dae <UART_SetConfig+0xd6>
 8001d5e:	4b85      	ldr	r3, [pc, #532]	; (8001f74 <UART_SetConfig+0x29c>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	2203      	movs	r2, #3
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d00d      	beq.n	8001d86 <UART_SetConfig+0xae>
 8001d6a:	d81b      	bhi.n	8001da4 <UART_SetConfig+0xcc>
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d014      	beq.n	8001d9a <UART_SetConfig+0xc2>
 8001d70:	d818      	bhi.n	8001da4 <UART_SetConfig+0xcc>
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <UART_SetConfig+0xa4>
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d00a      	beq.n	8001d90 <UART_SetConfig+0xb8>
 8001d7a:	e013      	b.n	8001da4 <UART_SetConfig+0xcc>
 8001d7c:	231f      	movs	r3, #31
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	e035      	b.n	8001df2 <UART_SetConfig+0x11a>
 8001d86:	231f      	movs	r3, #31
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	e030      	b.n	8001df2 <UART_SetConfig+0x11a>
 8001d90:	231f      	movs	r3, #31
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2204      	movs	r2, #4
 8001d96:	701a      	strb	r2, [r3, #0]
 8001d98:	e02b      	b.n	8001df2 <UART_SetConfig+0x11a>
 8001d9a:	231f      	movs	r3, #31
 8001d9c:	18fb      	adds	r3, r7, r3
 8001d9e:	2208      	movs	r2, #8
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	e026      	b.n	8001df2 <UART_SetConfig+0x11a>
 8001da4:	231f      	movs	r3, #31
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	2210      	movs	r2, #16
 8001daa:	701a      	strb	r2, [r3, #0]
 8001dac:	e021      	b.n	8001df2 <UART_SetConfig+0x11a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a71      	ldr	r2, [pc, #452]	; (8001f78 <UART_SetConfig+0x2a0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d104      	bne.n	8001dc2 <UART_SetConfig+0xea>
 8001db8:	231f      	movs	r3, #31
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e017      	b.n	8001df2 <UART_SetConfig+0x11a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a6d      	ldr	r2, [pc, #436]	; (8001f7c <UART_SetConfig+0x2a4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d104      	bne.n	8001dd6 <UART_SetConfig+0xfe>
 8001dcc:	231f      	movs	r3, #31
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e00d      	b.n	8001df2 <UART_SetConfig+0x11a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a69      	ldr	r2, [pc, #420]	; (8001f80 <UART_SetConfig+0x2a8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d104      	bne.n	8001dea <UART_SetConfig+0x112>
 8001de0:	231f      	movs	r3, #31
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	e003      	b.n	8001df2 <UART_SetConfig+0x11a>
 8001dea:	231f      	movs	r3, #31
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	2210      	movs	r2, #16
 8001df0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69da      	ldr	r2, [r3, #28]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d15d      	bne.n	8001eba <UART_SetConfig+0x1e2>
  {
    switch (clocksource)
 8001dfe:	231f      	movs	r3, #31
 8001e00:	18fb      	adds	r3, r7, r3
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d015      	beq.n	8001e34 <UART_SetConfig+0x15c>
 8001e08:	dc18      	bgt.n	8001e3c <UART_SetConfig+0x164>
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d00d      	beq.n	8001e2a <UART_SetConfig+0x152>
 8001e0e:	dc15      	bgt.n	8001e3c <UART_SetConfig+0x164>
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <UART_SetConfig+0x142>
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d005      	beq.n	8001e24 <UART_SetConfig+0x14c>
 8001e18:	e010      	b.n	8001e3c <UART_SetConfig+0x164>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e1a:	f7ff fc2d 	bl	8001678 <HAL_RCC_GetPCLK1Freq>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	61bb      	str	r3, [r7, #24]
        break;
 8001e22:	e012      	b.n	8001e4a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e24:	4b57      	ldr	r3, [pc, #348]	; (8001f84 <UART_SetConfig+0x2ac>)
 8001e26:	61bb      	str	r3, [r7, #24]
        break;
 8001e28:	e00f      	b.n	8001e4a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e2a:	f7ff fbb5 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	61bb      	str	r3, [r7, #24]
        break;
 8001e32:	e00a      	b.n	8001e4a <UART_SetConfig+0x172>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	61bb      	str	r3, [r7, #24]
        break;
 8001e3a:	e006      	b.n	8001e4a <UART_SetConfig+0x172>
      default:
        pclk = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001e40:	231e      	movs	r3, #30
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
        break;
 8001e48:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d100      	bne.n	8001e52 <UART_SetConfig+0x17a>
 8001e50:	e07b      	b.n	8001f4a <UART_SetConfig+0x272>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	005a      	lsls	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	085b      	lsrs	r3, r3, #1
 8001e5c:	18d2      	adds	r2, r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	0019      	movs	r1, r3
 8001e64:	0010      	movs	r0, r2
 8001e66:	f7fe f94f 	bl	8000108 <__udivsi3>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	d91c      	bls.n	8001eb0 <UART_SetConfig+0x1d8>
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	025b      	lsls	r3, r3, #9
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d217      	bcs.n	8001eb0 <UART_SetConfig+0x1d8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	200e      	movs	r0, #14
 8001e86:	183b      	adds	r3, r7, r0
 8001e88:	210f      	movs	r1, #15
 8001e8a:	438a      	bics	r2, r1
 8001e8c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	085b      	lsrs	r3, r3, #1
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2207      	movs	r2, #7
 8001e96:	4013      	ands	r3, r2
 8001e98:	b299      	uxth	r1, r3
 8001e9a:	183b      	adds	r3, r7, r0
 8001e9c:	183a      	adds	r2, r7, r0
 8001e9e:	8812      	ldrh	r2, [r2, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	183a      	adds	r2, r7, r0
 8001eaa:	8812      	ldrh	r2, [r2, #0]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	e04c      	b.n	8001f4a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8001eb0:	231e      	movs	r3, #30
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
 8001eb8:	e047      	b.n	8001f4a <UART_SetConfig+0x272>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001eba:	231f      	movs	r3, #31
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d015      	beq.n	8001ef0 <UART_SetConfig+0x218>
 8001ec4:	dc18      	bgt.n	8001ef8 <UART_SetConfig+0x220>
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d00d      	beq.n	8001ee6 <UART_SetConfig+0x20e>
 8001eca:	dc15      	bgt.n	8001ef8 <UART_SetConfig+0x220>
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <UART_SetConfig+0x1fe>
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d005      	beq.n	8001ee0 <UART_SetConfig+0x208>
 8001ed4:	e010      	b.n	8001ef8 <UART_SetConfig+0x220>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001ed6:	f7ff fbcf 	bl	8001678 <HAL_RCC_GetPCLK1Freq>
 8001eda:	0003      	movs	r3, r0
 8001edc:	61bb      	str	r3, [r7, #24]
        break;
 8001ede:	e012      	b.n	8001f06 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001ee0:	4b28      	ldr	r3, [pc, #160]	; (8001f84 <UART_SetConfig+0x2ac>)
 8001ee2:	61bb      	str	r3, [r7, #24]
        break;
 8001ee4:	e00f      	b.n	8001f06 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ee6:	f7ff fb57 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8001eea:	0003      	movs	r3, r0
 8001eec:	61bb      	str	r3, [r7, #24]
        break;
 8001eee:	e00a      	b.n	8001f06 <UART_SetConfig+0x22e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	61bb      	str	r3, [r7, #24]
        break;
 8001ef6:	e006      	b.n	8001f06 <UART_SetConfig+0x22e>
      default:
        pclk = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001efc:	231e      	movs	r3, #30
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
        break;
 8001f04:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01e      	beq.n	8001f4a <UART_SetConfig+0x272>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	085a      	lsrs	r2, r3, #1
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	18d2      	adds	r2, r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	0010      	movs	r0, r2
 8001f1e:	f7fe f8f3 	bl	8000108 <__udivsi3>
 8001f22:	0003      	movs	r3, r0
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	2b0f      	cmp	r3, #15
 8001f2c:	d909      	bls.n	8001f42 <UART_SetConfig+0x26a>
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	025b      	lsls	r3, r3, #9
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d204      	bcs.n	8001f42 <UART_SetConfig+0x26a>
      {
        huart->Instance->BRR = usartdiv;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	60da      	str	r2, [r3, #12]
 8001f40:	e003      	b.n	8001f4a <UART_SetConfig+0x272>
      }
      else
      {
        ret = HAL_ERROR;
 8001f42:	231e      	movs	r3, #30
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8001f56:	231e      	movs	r3, #30
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	781b      	ldrb	r3, [r3, #0]
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b008      	add	sp, #32
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	efff69f3 	.word	0xefff69f3
 8001f68:	ffffcfff 	.word	0xffffcfff
 8001f6c:	fffff4ff 	.word	0xfffff4ff
 8001f70:	40013800 	.word	0x40013800
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40004400 	.word	0x40004400
 8001f7c:	40004800 	.word	0x40004800
 8001f80:	40004c00 	.word	0x40004c00
 8001f84:	007a1200 	.word	0x007a1200

08001f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	2201      	movs	r2, #1
 8001f96:	4013      	ands	r3, r2
 8001f98:	d00b      	beq.n	8001fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a4a      	ldr	r2, [pc, #296]	; (80020cc <UART_AdvFeatureConfig+0x144>)
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d00b      	beq.n	8001fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	4a43      	ldr	r2, [pc, #268]	; (80020d0 <UART_AdvFeatureConfig+0x148>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	2204      	movs	r2, #4
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d00b      	beq.n	8001ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a3b      	ldr	r2, [pc, #236]	; (80020d4 <UART_AdvFeatureConfig+0x14c>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d00b      	beq.n	8002018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4a34      	ldr	r2, [pc, #208]	; (80020d8 <UART_AdvFeatureConfig+0x150>)
 8002008:	4013      	ands	r3, r2
 800200a:	0019      	movs	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	2210      	movs	r2, #16
 800201e:	4013      	ands	r3, r2
 8002020:	d00b      	beq.n	800203a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a2c      	ldr	r2, [pc, #176]	; (80020dc <UART_AdvFeatureConfig+0x154>)
 800202a:	4013      	ands	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	2220      	movs	r2, #32
 8002040:	4013      	ands	r3, r2
 8002042:	d00b      	beq.n	800205c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	4a25      	ldr	r2, [pc, #148]	; (80020e0 <UART_AdvFeatureConfig+0x158>)
 800204c:	4013      	ands	r3, r2
 800204e:	0019      	movs	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	2240      	movs	r2, #64	; 0x40
 8002062:	4013      	ands	r3, r2
 8002064:	d01d      	beq.n	80020a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <UART_AdvFeatureConfig+0x15c>)
 800206e:	4013      	ands	r3, r2
 8002070:	0019      	movs	r1, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	035b      	lsls	r3, r3, #13
 8002086:	429a      	cmp	r2, r3
 8002088:	d10b      	bne.n	80020a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4a15      	ldr	r2, [pc, #84]	; (80020e8 <UART_AdvFeatureConfig+0x160>)
 8002092:	4013      	ands	r3, r2
 8002094:	0019      	movs	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	4013      	ands	r3, r2
 80020aa:	d00b      	beq.n	80020c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <UART_AdvFeatureConfig+0x164>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	605a      	str	r2, [r3, #4]
  }
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b002      	add	sp, #8
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	fffdffff 	.word	0xfffdffff
 80020d0:	fffeffff 	.word	0xfffeffff
 80020d4:	fffbffff 	.word	0xfffbffff
 80020d8:	ffff7fff 	.word	0xffff7fff
 80020dc:	ffffefff 	.word	0xffffefff
 80020e0:	ffffdfff 	.word	0xffffdfff
 80020e4:	ffefffff 	.word	0xffefffff
 80020e8:	ff9fffff 	.word	0xff9fffff
 80020ec:	fff7ffff 	.word	0xfff7ffff

080020f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2280      	movs	r2, #128	; 0x80
 80020fc:	2100      	movs	r1, #0
 80020fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002100:	f7fe fbee 	bl	80008e0 <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2208      	movs	r2, #8
 8002110:	4013      	ands	r3, r2
 8002112:	2b08      	cmp	r3, #8
 8002114:	d10c      	bne.n	8002130 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2280      	movs	r2, #128	; 0x80
 800211a:	0391      	lsls	r1, r2, #14
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4a17      	ldr	r2, [pc, #92]	; (800217c <UART_CheckIdleState+0x8c>)
 8002120:	9200      	str	r2, [sp, #0]
 8002122:	2200      	movs	r2, #0
 8002124:	f000 f82c 	bl	8002180 <UART_WaitOnFlagUntilTimeout>
 8002128:	1e03      	subs	r3, r0, #0
 800212a:	d001      	beq.n	8002130 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e021      	b.n	8002174 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2204      	movs	r2, #4
 8002138:	4013      	ands	r3, r2
 800213a:	2b04      	cmp	r3, #4
 800213c:	d10c      	bne.n	8002158 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2280      	movs	r2, #128	; 0x80
 8002142:	03d1      	lsls	r1, r2, #15
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4a0d      	ldr	r2, [pc, #52]	; (800217c <UART_CheckIdleState+0x8c>)
 8002148:	9200      	str	r2, [sp, #0]
 800214a:	2200      	movs	r2, #0
 800214c:	f000 f818 	bl	8002180 <UART_WaitOnFlagUntilTimeout>
 8002150:	1e03      	subs	r3, r0, #0
 8002152:	d001      	beq.n	8002158 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e00d      	b.n	8002174 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2220      	movs	r2, #32
 800215c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2274      	movs	r2, #116	; 0x74
 800216e:	2100      	movs	r1, #0
 8002170:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	b004      	add	sp, #16
 800217a:	bd80      	pop	{r7, pc}
 800217c:	01ffffff 	.word	0x01ffffff

08002180 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	1dfb      	adds	r3, r7, #7
 800218e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002190:	e05e      	b.n	8002250 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	3301      	adds	r3, #1
 8002196:	d05b      	beq.n	8002250 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002198:	f7fe fba2 	bl	80008e0 <HAL_GetTick>
 800219c:	0002      	movs	r2, r0
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d302      	bcc.n	80021ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d11b      	bne.n	80021e6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	492f      	ldr	r1, [pc, #188]	; (8002278 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80021ba:	400a      	ands	r2, r1
 80021bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2101      	movs	r1, #1
 80021ca:	438a      	bics	r2, r1
 80021cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2220      	movs	r2, #32
 80021d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2274      	movs	r2, #116	; 0x74
 80021de:	2100      	movs	r1, #0
 80021e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e044      	b.n	8002270 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2204      	movs	r2, #4
 80021ee:	4013      	ands	r3, r2
 80021f0:	d02e      	beq.n	8002250 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	401a      	ands	r2, r3
 80021fe:	2380      	movs	r3, #128	; 0x80
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	429a      	cmp	r2, r3
 8002204:	d124      	bne.n	8002250 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4917      	ldr	r1, [pc, #92]	; (8002278 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800221c:	400a      	ands	r2, r1
 800221e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2101      	movs	r1, #1
 800222c:	438a      	bics	r2, r1
 800222e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	2120      	movs	r1, #32
 8002242:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2274      	movs	r2, #116	; 0x74
 8002248:	2100      	movs	r1, #0
 800224a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e00f      	b.n	8002270 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	4013      	ands	r3, r2
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	425a      	negs	r2, r3
 8002260:	4153      	adcs	r3, r2
 8002262:	b2db      	uxtb	r3, r3
 8002264:	001a      	movs	r2, r3
 8002266:	1dfb      	adds	r3, r7, #7
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d091      	beq.n	8002192 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	0018      	movs	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	b004      	add	sp, #16
 8002276:	bd80      	pop	{r7, pc}
 8002278:	fffffe5f 	.word	0xfffffe5f

0800227c <__libc_init_array>:
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	2600      	movs	r6, #0
 8002280:	4d0c      	ldr	r5, [pc, #48]	; (80022b4 <__libc_init_array+0x38>)
 8002282:	4c0d      	ldr	r4, [pc, #52]	; (80022b8 <__libc_init_array+0x3c>)
 8002284:	1b64      	subs	r4, r4, r5
 8002286:	10a4      	asrs	r4, r4, #2
 8002288:	42a6      	cmp	r6, r4
 800228a:	d109      	bne.n	80022a0 <__libc_init_array+0x24>
 800228c:	2600      	movs	r6, #0
 800228e:	f000 f821 	bl	80022d4 <_init>
 8002292:	4d0a      	ldr	r5, [pc, #40]	; (80022bc <__libc_init_array+0x40>)
 8002294:	4c0a      	ldr	r4, [pc, #40]	; (80022c0 <__libc_init_array+0x44>)
 8002296:	1b64      	subs	r4, r4, r5
 8002298:	10a4      	asrs	r4, r4, #2
 800229a:	42a6      	cmp	r6, r4
 800229c:	d105      	bne.n	80022aa <__libc_init_array+0x2e>
 800229e:	bd70      	pop	{r4, r5, r6, pc}
 80022a0:	00b3      	lsls	r3, r6, #2
 80022a2:	58eb      	ldr	r3, [r5, r3]
 80022a4:	4798      	blx	r3
 80022a6:	3601      	adds	r6, #1
 80022a8:	e7ee      	b.n	8002288 <__libc_init_array+0xc>
 80022aa:	00b3      	lsls	r3, r6, #2
 80022ac:	58eb      	ldr	r3, [r5, r3]
 80022ae:	4798      	blx	r3
 80022b0:	3601      	adds	r6, #1
 80022b2:	e7f2      	b.n	800229a <__libc_init_array+0x1e>
 80022b4:	08002324 	.word	0x08002324
 80022b8:	08002324 	.word	0x08002324
 80022bc:	08002324 	.word	0x08002324
 80022c0:	08002328 	.word	0x08002328

080022c4 <memset>:
 80022c4:	0003      	movs	r3, r0
 80022c6:	1882      	adds	r2, r0, r2
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d100      	bne.n	80022ce <memset+0xa>
 80022cc:	4770      	bx	lr
 80022ce:	7019      	strb	r1, [r3, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	e7f9      	b.n	80022c8 <memset+0x4>

080022d4 <_init>:
 80022d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022da:	bc08      	pop	{r3}
 80022dc:	469e      	mov	lr, r3
 80022de:	4770      	bx	lr

080022e0 <_fini>:
 80022e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e6:	bc08      	pop	{r3}
 80022e8:	469e      	mov	lr, r3
 80022ea:	4770      	bx	lr
